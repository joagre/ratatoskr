import Std.stdio: writeln

//type Either<$t1, $t2> = This<$t1> or That<$t2>
//alias Compare<$t> = ({$t, $t} -> Bool)

fn sort<$t>(compare: Compare<$t>, list: [$t]) -> Either<[$t], String> {
    if !list.isEmpty() {
        This<qsort(compare, list)>
    } else {
        That<"Empty List">
    }
}

export fn qsort(compare, list) {
    switch list {
        case [] => []
        case ?first :: ?rest =>
            (?smaller, ?larger) :=
                l.partition(fn (x) {
                                compare(x, first)
                            }, rest),
            qsort(compare, smaller) @ [first] @ qsort(compare, larger)
    }
}

export fn main(_args) {
    ?compare := fn (x, y) { x < y },
    switch sort(compare, [3, 1, 32, 0]) {
        case This<?l> => writeln("Success: %l")
        case That<?reason> => writeln("Error: %reason")
    }
}
