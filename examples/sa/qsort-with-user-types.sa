import Std.stdio: writeln

type Either<$t1, $t2> = Left<$t1> or Right<$t2>
alias Compare<$t> = ([$t, $t] -> Bool)

fn sort<$t>(compare is Compare<$t>, list is [$t]) is Either<[$t], String> {
    if !list.isEmpty() {
        Left<qsort(compare, list)>
    } else {
        Right<"Empty List">
    }
}

export fn qsort(compare, list) {
    case list {
        [] {
            []
        }
        ?first :: ?rest {
            (?smaller, ?larger) :=
                l.partition(fn (x) { compare(x, first) }, rest),
            qsort(compare, smaller) @ [first] @ qsort(compare, larger)
        }
    }
}

export fn main(_args) {
    fn compare(x, y) { x lt y },
    case sort(compare, [3, 1, 32, 0]) {
        Left<?l> {
            writeln("Success: %l")
        }
        Right<?reason> {
            writeln("Error: %reason")
        }
    }
}
