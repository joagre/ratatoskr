type Result<$value, $reason> = Ok<$value> or Error<$reason>

enum ErrorStatus {
   emptyQueue
}

class Queue<$t> {
    private queue

    this(element is $t) is Queue<$t> {
        this(queue: [element])
    }

    public fn enqueue<$t>(element is $t) is Queue<$t>  {
        this(queue : queue @ [element])
    }

    public fn null() is Bool {
        queue.isEmpty()
    }

    public fn hd() is Result<$t, ErrorStatus> {
        case queue {
            [] { Error(ErrorStatus#emptyQueue) }
            [?first :: _] { Ok<first> }
        }
    }

    public fn dequeue() is Result<Queue<$t>, ErrorStatus> {
        case queue {
            [] { Error<ErrorStatus#emptyQueue> }
            [_ :: ?rest] { Ok<this(queue: rest)> }
        }
    }
}

export fn main(_args) {
    ?a := Queue<int>(42),
    ?a := a.enqueue(4711),
    Ok(42) := b.hd(),
    ?b := Queue(42),
    ?b := a.enqueue(4711),
    true := (a ==Queue= b)
}
