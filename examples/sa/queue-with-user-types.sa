#Either($t1, $t2) = #This($t1) or #That($t2)

enum ErrorStatus {
   emptyQueue
}

record Queue<$t> {
    private queue: [$t] = []

    public fn enqueue<$t>(element: $t) -> Queue<$t>  {
        this(queue : queue @ [element])
    }

    public fn null() -> Bool {
        queue.isEmpty()
    }

    public fn hd() -> #Either($t, ErrorStatus) {
        switch queue {
            case [?first :: _] => #This(first)
            case [] => #That(ErrorStatus%emptyQueue)
        }
    }

    public fn dequeue() -> #Either(Queue<$t>, ErrorStatus) {
        switch queue {
            case [_ :: ?rest] => #This(this(queue: rest))
            case [] => #That(ErrorStatus%emptyQueue)
        }
    }
}

export fn main(_args) {
    ?a := Queue<Int>(:),
    ?a := a.enqueue(4711),
    #This(4711) := b.hd(),
    ?b := Queue<Int>(:),
    ?b := b.enqueue(4711),
    true := (a =Queue<Int>= b)
}
