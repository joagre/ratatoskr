export fn main() {
  fn foo(x) {
      x + 1
  },
  ?bar := fn (x) {
      (?a, ?b) := x,
      foo(a) + baz(b)
  },
  ?zippo := fn gazonk(x, y is String) {
      gazonk(x, y) + 1 + bar((x, 42)) + foo(42) + foo(3 + gazonk(11, y)) // :-)
  },
  (foo(42), bar((4711, 43)), zippo(44, "bar"), gazonk(10, "foo"), baz(45))
}

fn baz(x) {
    x + 1
}

// Type variables in functions defintions

fn foo<$t>(x is $t, baz is ($t -> ($t, $t))) -> ($t, $t) {
    baz(x)
}

fn bar() {
   (42, 42) := foo<Int>(42, fn (x) { (x, x) })
}

// Type variables in nested named function literals

fn zippo() {
    fn foo<$t>(x is $t, baz is ($t -> ($t, $t))) -> ($t, $t) {
        baz(x)
    },
    (42, 42) := foo<Int>(42, fn (x) { (x, x) })
}

// Type variables in anonymous function literals

fn zippo() {
    ?foo := fn <$t>(x is $t, baz is ($t -> ($t, $t))) -> ($t, $t) {
        baz(x)
    },
    (42, 42) := foo<Int>(42, fn (x) { (x, x) })
}
