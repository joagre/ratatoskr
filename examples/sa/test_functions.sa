fn bonk(f) {
    (?a, ?b) := f,
    foo((a, b))
}

fn foo(x) {
    (?a, ?b) := x,
    ?c := a,
    c(1) + b
}

fn bar() {
    foo((fn (x) { x + 1 }, 42))
}

/*
export fn main() {
  fn foo(x) {
      x + 1
  },
  ?bar := fn (x) {
      (?a, ?b is String) := x,
      foo(a) + baz(b)
  },
  ?zippo := fn gazonk(x, y is String) {
      gazonk(x, y) + 1 + bar((x, 42)) + foo(42) + foo(3 + gazonk(11, y)) // :-)
  },
  (foo(42), bar((4711, 43)), zippo(44, "bar"), gazonk(10, "foo"), baz(45))
}

fn baz(x) {
    x + 1
}
*/