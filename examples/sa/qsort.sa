import std.stdio : writeln

type Result(Value, Reason) = Ok(Value) or Error(Reason)

fn sort(c, l) {
    if !l.isEmpty() {
        Result:Ok(qsort(c, l))
    } else {
        Result:Error("Empty List")
    }
}

fn qsort(c, l) {
    case l {
        [] { [] }
        ?x :: ?xs {
            (?smaller, ?larger) := l.partition(fn (y) { c(y, x) }, xs),
            qsort(c, smaller) @ [x] @ qsort(c, larger)
        }
    }
}

export fn main(_args) {
    fn compare(x, y) { x < y }, // NOTE: < is only defined for ints
    case qsort(compare, [3, 1, 32, 0]) {
        Reason:Error(?reason) { writeln("Error: $reason") }
        Reason:Success(?l) { writeln("Success: $l") }
    }
}

/*
Kommentar:

fn qsort(c, l) { ... ovan skulle kunnat ha skrivits så här men det "behövs inte":

alias Compare(T) = (T, T) -> Bool
fn qsort(c : Compare(T), l : [T]) : Result([T], String) { ...
*/
