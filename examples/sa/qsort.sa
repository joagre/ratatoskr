import std.stdio : writeln

type Result(value, reason) = Ok(value) or Error(reason)

alias Compare(t) = (t, t) -> Bool

fn sort(compare : Compare(T), list : [T]) : Result([T], String) {
    if !list.isEmpty() {
        Ok(qsort(compare, list))
    } else {
        Error("Empty List")
    }
}

fn qsort(compare, list) {
    case list {
        [] { [] }
        ?first :: ?rest {
            (?smaller, ?larger) :=
                l.partition(fn (x) { compare(x, first) }, rest),
            qsort(compare, smaller) @ [first] @ qsort(compare, larger)
        }
    }
}

export fn main(_args) {
    fn compare(x, y) { x < y }, // NOTE: < is only defined for ints
    case sort(compare, [3, 1, 32, 0]) {
        Error(?reason) { writeln("Error: $reason") }
        Success(?l) { writeln("Success: $l") }
    }
}
