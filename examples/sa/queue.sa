type Result(Value, Reason) = Ok(Value) or Error(Reason)

enum ErrorStatus {
   emptyQueue
}

class Queue {
    private queue

    this(x) {
        this(queue: [x])
    }

    public fn enqueue(x) {
        this(queue: queue @ [x])
    }

    public fn null() {
        queue.isEmpty()
    }

    public fn hd() {
        case queue {
            [] { Result:Error(ErrorStatus#emptyQueue) }
            [?x :: _] { Result:Ok(x) }
        }
    }

    public fn dequeue() {
        case queue {
            [] { Result:Error(ErrorStatus#emptyQueue) }
            [_ :: ?xs] { Result:Ok(this(queue: xs)) }
        }
    }
}

export fn main(_args) {
    ?a := Queue(0.1),
    ?b := a.enqueue(3.14)
    //Result:Ok(0.1) := b.hd()
}
