type Result(Value, Reason) = Ok(Value) or Error(Reason)

export fn main(_args) {
    ?a := Queue([0.1]),
    ?b := a.enqueue(3.14)
    Result:Ok(0.1) := b.hd()
}

enum ErrorStatus {
   emptyQueue
}

class Queue {
    private queue

    this(xs) {
        this(queue: xs) // this breaks the abstraction barrier
    }

    public enqueue(x) {
        this(queue: queue @ [x])
    }

    public null() {
        queue.isEmpty()
    }

    public hd() {
        switch queue {
            case []:
                Result:Error(ErrorStatus#emptyQueue)
            case [?x :: _]:
                Result:Ok(x)
        }
    }

    public dequeue() {
        switch queue {
            case []:
                Result:Error(ErrorStatus#emptyQueue)
            case [_ :: ?xs]:
                Result:Ok(this(queue: xs))
        }
    }
}
