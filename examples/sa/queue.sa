type Either<$t1, $t2> = Left<$t1> || Right<$t2>

enum ErrorStatus {
   emptyQueue
}

record Queue {
    private queue = []

    public fn enqueue(element) {
        this(queue: queue @ [element])
    }

    public fn null() {
        queue.isEmpty()
    }

    public fn hd() {
        switch queue {
            case [?first :: _] => Left<first>
            case [] => Right<ErrorStatus#emptyQueue>
        }
    }

    public fn dequeue() {
        switch queue {
            case [_ :: ?rest] => Left<this(queue: rest)>
            case [] => Right<ErrorStatus#emptyQueue>
        }
    }
}

export fn main(_args) {
    ?a := Queue(:),
    ?a := a.enqueue(4711),
    Left<4711> := b.hd(),
    ?b := Queue(:),
    ?b := b.enqueue(4711),
    true := (a =Queue= b)
}
