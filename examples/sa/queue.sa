type Either<$t1, $t2> = Left<$t1> or Right<$t2>

enum ErrorStatus {
   emptyQueue
}

class Queue {
    private queue

    this(element) {
        this(queue: [element])
    }

    public fn enqueue(element) {
        this(queue: queue @ [element])
    }

    public fn null() {
        queue.isEmpty()
    }

    public fn hd() {
        case queue {
            [?first :: _] {
                Left<first>
            }
            [] {
                Right<ErrorStatus#emptyQueue>
            }

        }
    }

    public fn dequeue() {
        case queue {
            [_ :: ?rest] {
                Left<this(queue: rest)>
            }
            [] {
                Right<ErrorStatus#emptyQueue>
            }
        }
    }
}

export fn main(_args) {
    ?a := Queue(42),
    ?a := a.enqueue(4711),
    Left<42> := b.hd(),
    ?b := Queue(42),
    ?b := b.enqueue(4711),
    true := (a =Queue= b)
}
