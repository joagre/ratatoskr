type Result(value, reason) = Ok(value) or Error(reason)

enum ErrorStatus {
   emptyQueue
}

class Queue {
    private queue

    this(element) {
        this(queue: [element])
    }

    public fn enqueue(element) {
        this(queue: queue @ [element])
    }

    public fn null() {
        queue.isEmpty()
    }

    public fn hd() {
        case queue {
            [] { Error(ErrorStatus#emptyQueue) }
            [?first :: _] { Ok(first) }
        }
    }

    public fn dequeue() {
        case queue {
            [] { Error(ErrorStatus#emptyQueue) }
            [_ :: ?rest] { Ok(this(queue: rest)) }
        }
    }
}

export fn main(_args) {
    ?a := Queue(0.1),
    ?b := a.enqueue(3.14)
    Ok(0.1) := b.hd()
}
