import Std.stdio: writeln

export fn main(_args) {
  ?masterTask := launch Master(),
  masterTask->startSlave(3, 10), // -> is a cast
  masterTask->startSlave(3, 11),
  2 := masterTask<->startedSlaves // <-> is a call
}

task Master {
    public startedSlaves = 0
    public fn startSlave(m, n) {
        ?slaveTask := launch Slave(this),
        slaveTask->start(m, n),
        this(startedSlaves: startedSlaves + 1)
    }
    public fn slaveRunning(m, n) {
        writeln("Slave %m:%n started")
    }
    public fn slaveDone(m, n, result) {
        writeln("Slave calculated %m:%n = %result")
    }
}

task Slave {
    private masterTask is Task
    this(masterTask) {
        this(masterTask: masterTask)
    }
    public fn start(m, n) {
        masterTask->slaveRunning(m, n),
        ?result := ackermann(m, n),
        masterTask->slaveDone(m, n, result)
    }
    private fn ackermann(m, n) {
        if m =Int= 0 {
            n + 1
        } elif n =Int= 0 && m >Int> 0 {
            ackermann(m - 1, 1)
        } else {
            ackermann(m - 1, ackermann(m, n - 1))
        }
    }
}
