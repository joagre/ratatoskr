import Std.stdio: writeln

export fn main(_args) {
    ?masterTask := launch Master(:),
    masterTask~>startSlave(3, 10), // ~> is a "cast"
    masterTask~>startSlave(3, 11),
    2 := masterTask<~startedSlaves(), // <~ is a "call"
    2 := masterTask<~startedSlaves // works as well (it's public property)
}

task Master {
    public startedSlaves = 0
    public fn startSlave(m, n) {
        ?slaveTask := launch Slave(masterTask: this),
        slaveTask~>start(m, n),
        this(startedSlaves: startedSlaves + 1)
    }
    public fn slaveRunning(m, n) {
        writeln("Slave %m:%n started")
    }
    public fn slaveDone(m, n, result) {
        writeln("Slave calculated %m:%n = %result")
    }
    public fn startedSlaves() {
        startedSlaves
    }
}

task Slave {
    private masterTask: Task
    public fn start(m, n) {
        masterTask~>slaveRunning(m, n),
        ?result := ackermann(m, n),
        masterTask~>slaveDone(m, n, result)
    }
    private fn ackermann(m, n) {
        if m == 0 {
            n + 1
        } elif n == 0 && m > 0 {
            ackermann(m - 1, 1)
        } else {
            ackermann(m - 1, ackermann(m, n - 1))
        }
    }
}
