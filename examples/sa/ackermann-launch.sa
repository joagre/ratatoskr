import Std.stdio

// Note:
// -> is a cast
// <-> is a call

export fn main(_args) {
  ?master := launch Master(),
  true := master<->startSlaves(3, 10)
}

record Master {
    private slaves is [Task] = []
    public fn startSlaves(m, n, i = 0) {
        if i <Int< n {
            ?slave := launch Slave(self),
            slave->start(m, i),
            startSlaves(m, n, i + 1)
        } else {
            true
        }
    }
    public fn slaveStarted(slave, m, n) {
        writeln("Slave %m:%n started"),
        this(slaves: slave :: slaves)
    }
    public fn slaveDone(slave, m, n, result) {
        writeln("Slave calculated %m:%n = %result"),
        this(slaves: slaves.delete(slave))
    }
}

record Slave {
    private master is Task
    this(master) {
        this(master: master)
    }
    public fn start(m, n) {
        master->slaveStarted(self, m, n),
        ?result := ackermann(m, n),
        master->slaveDone(self, m, n, result)
    }
    private fn ackermann(m, n) {
        if m =Int= 0 {
            n + 1
        } elif n =Int= 0 && m >Int> 0 {
            ackermann(m - 1, 1)
        } else {
            ackermann(m - 1, ackermann(m, n - 1))
        }
    }
}
