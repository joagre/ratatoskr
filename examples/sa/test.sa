import a.b.c
import d = a.b.c
import a.b.c : Type

record Foo {
    this(a) {
        a
    }
    public a = 1
    public const b = 2 + a
    private c = 3
    private const d = 2 * c
    readonly e = (a + b) * c + d
    public fn foo(a) {
        a
    }
    private fn bar(a) {
        a
    }

}

fn main() {
    {
        ?a := 3
    },

    (a, b),
    (c),
    (1 + 2) * 3,
    (),

    ?b := 2.toFloat() +; 1.0,
    ?a := 2,
    ?b := a.toFloat() +; 1.0,
    ?b := if c =Int= 3 { 2 } else { 3 }.toFloat() +; 1.0,


    ?a := [1, 2, 3],
    ?b := b[a: 4],
    [b: 2],
    c[d: 2],
    [1, 2] := a,
    ?a := a[1 = 2],
    a[b] as ?c := 3,
    ?ackermann := Ackermann(),
    ackermann := startJobs(3, 10),
    a[1],
    1 := 1,
    ?a := b :: c,
    case a {
        ?a :: ?b => snuva
        b when true => c
        e => d
    },
    case a {
        (?b, a), (?b, a) =>  c
    },
    (1, 2),
    lists.foreach(fn () { stdio.writeln(item.toString())}, items),
    a := 1,
    (1, 2) := a,
    a := 1 + (2 + a) + 1,
    foo(),
    foo[1].baz.bonk,
    ?len := if true {
               a
           } else {
               b
           }.length()
}
