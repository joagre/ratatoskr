import Std.stdio: writeln

type Either<$t1, $t2> = Left<$t1> or Right <$t2>

enum Color {
    red
    green
    blue
}

interface Iterator<$t> {
    public fn next() is Either<false, (Iterator<$t>, $t)>
    public fn hasNext() is Bool
}

class ColorIterator implements Iterator<Color> {
    private colors is [Color]
    private graffiti is String

    this(colors) {
        this(colors: colors, graffiti: "Kilroy was here")
    }

    public fn next() {
        if !hasNext() {
            Left<false>
        } else {
            Right<(this(colors: colors.rest()), colors.first())>
        }
    }

    public fn hasNext() {
        !colors.isEmpty()
    }
}

export fn main() {
    ?colors := [Color#red, Color#red, Color#blue, Color#green],
    ?iterator := ColorIterator(colors),
    fn iterate(iterator) {
        if iterator.hasNext() {
            (?iterator, ?color) := iterator.next(),
            writeln("Color: %color"),
            iterate(iterator)
        } else {
            true
        }
    },
    iterate(iterator)
}
