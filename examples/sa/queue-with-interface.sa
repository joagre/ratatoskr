type Either<$t1, $t2> = Left<$t1> || Right<$t2>

enum ErrorStatus {
   emptyQueue
}

interface QueueInterface<$t> {
    this(element is $t) -> QueueInterface<$t>
    public fn enqueue(element is $t) -> QueueInterface<$t>
    public fn null() -> Bool
    public fn hd() -> Either<$t, ErrorStatus>
    public fn dequeue() -> Either<QueueInterface<$t>, ErrorStatus>
}

record Queue<$t> implements QueueInterface<$t> {
    private queue is [$t]

    this(element) {
        this(queue : [element])
    }

    public fn enqueue(element) {
        this(queue : queue @ [element])
    }

    public fn null() {
        queue.isEmpty()
    }

    public fn hd() {
        switch queue {
            case [?first :: _] => Left<first>
            case [] => Right<ErrorStatus#emptyQueue>
        }
    }

    public fn dequeue() {
        switch queue {
            case [_ :: ?rest] => Left<this(queue: rest)>
            case [] => Right<ErrorStatus#emptyQueue>
        }
    }
}

export fn main(_args) {
    ?a := new Queue(42),
    ?a := a.enqueue(4711),
    Left<42> := b.hd(),
    ?b := new Queue(42),
    ?b := b.enqueue(4711),
    true := (a =Queue= b)
}
