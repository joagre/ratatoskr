type Either($t1, $t2) = #This($t1) or #That($t2)

enum ErrorStatus {
   emptyQueue
}

interface QueueInterface<$t> {
    public fn enqueue(element: $t) -> QueueInterface<$t>
    public fn null() -> Bool
    public fn hd() -> #Either($t, ErrorStatus)
    public fn dequeue() -> #Either(QueueInterface<$t>, ErrorStatus)
}

record Queue<$t> implements QueueInterface<$t> {
    private queue: [$t] = []

    public fn enqueue(element) {
        this(queue : queue @ [element])
    }

    public fn null() {
        queue.isEmpty()
    }

    public fn hd() {
        switch queue {
            case [?first :: _] => #This(first)
            case [] => #That(ErrorStatus%emptyQueue)
        }
    }

    public fn dequeue() {
        switch queue {
            case [_ :: ?rest] => #This(this(queue: rest))
            case [] => #That(ErrorStatus%emptyQueue)
        }
    }
}

export fn main(_args) {
    ?a := Queue<Int>(:),
    ?a := a.enqueue(4711),
    #This(4711) := b.hd(),
    ?b := Queue<Int>(:),
    ?b := b.enqueue(4711),
    true := (a =Queue<Int>= b)
}
