%prefix "satie"

%header

%auxil "satie_auxil_t*"
%value "ast_node_t*"

%source

#
# Top level structure
#

Program <- _ (Imports __)? TopLevelDefs EOF
TopLevelDefs <- TopLevelDef (__ TopLevelDef / TopLevelDefError)*
TopLevelDef <- (ClassDef / InterfaceDef / EnumDef / FunctionDef)
TopLevelDefError <- ("," / ";") {
    panic("Unexpected %s between top level definitions on line %d",
          $0, auxil->row);
}

#
# Import
#

Imports <- Import (__ Import)*
Import <- "import" __ (Alias _ "=" _)? _ Module (_ ":" _ ImportedNames)?
Alias <- Identifier
Module <- ModuleComponent ("." ModuleComponent)*
ModuleComponent <- Identifier
ImportedNames <- ImportedName (_ "," _ ImportedName)*
ImportedName <- Identifier

#
# Expression
#

Expr <- BindExpr
BindExpr <- MatchExpr _ ":=" _ Expr / LogicalOrExpr
LogicalOrExpr <- LogicalOrExpr _ "||" _ LogicalAndExpr / LogicalAndExpr
LogicalAndExpr <- LogicalAndExpr _ "&&" _ BitwiseAndExpr / BitwiseAndExpr
BitwiseAndExpr <- BitwiseAndExpr _ "&" _ BitwiseXorExpr / BitwiseXorExpr
BitwiseXorExpr <- BitwiseXorExpr _ "^" _ BitwiseOrExpr / BitwiseOrExpr
BitwiseOrExpr <- BitwiseOrExpr _ "|" _ GreaterThanEqualExpr /
                 GreaterThanEqualExpr
GreaterThanEqualExpr <- GreaterThanEqualExpr _ "gte" _ GreaterThanExpr /
                        GreaterThanExpr
GreaterThanExpr <- GreaterThanExpr _ "gt" _ LessThanEqualExpr /
                   LessThanEqualExpr
LessThanEqualExpr <- LessThanEqualExpr _ "lte" _ LessThanExpr / LessThanExpr
LessThanExpr <- LessThanExpr _ "lt" _ NotEqualExpr / NotEqualExpr
NotEqualExpr <- NotEqualExpr _ "!=" _ EqualExpr / EqualExpr
EqualExpr <- EqualExpr _ "==" _ InExpr / InExpr
InExpr <- InExpr _ "in" _ RightShiftExpr / RightShiftExpr
RightShiftExpr <- RightShiftExpr _ "bsr" _ LeftShiftExpr / LeftShiftExpr
LeftShiftExpr <- LeftShiftExpr _ "bsl" _ ConcatExpr / ConcatExpr
ConcatExpr <- ConcatExpr _ "~" _ MinusExpr / MinusExpr
MinusExpr <- MinusExpr _ "-" _ PlusExpr / PlusExpr
PlusExpr <- PlusExpr _ "+" _ ModulusExpr / ModulusExpr
ModulusExpr <- ModulusExpr _ "%" _ DivideExpr / DivideExpr
DivideExpr <- DivideExpr _ "/" _ MultiplicateExpr / MultiplicateExpr
MultiplicateExpr <- MultiplicateExpr _ "*" _ ExponentiationExpr /
                    ExponentiationExpr
ExponentiationExpr <- ExponentiationExpr _ "^^" _ CastExpr / CastExpr
CastExpr <- "cast" _ "(" _ Type _ ")" _ BitwiseComplementExpr /
            BitwiseComplementExpr
BitwiseComplementExpr <- "~" _ NotExpr / NotExpr
NotExpr <- "!" _ UnaryPlusExpr / UnaryPlusExpr
UnaryPlusExpr <- "+" _ UnaryMinusExpr / UnaryMinusExpr
UnaryMinusExpr <- "-" _ PostfixExpr / PostfixExpr
PostfixExpr <- (PrimaryExpr
                (_ "." _ BoundName /
                 _ "[" _ Expr _ ".." _ Expr _ "]" /
                 _ "[" _ IndexValues _ "]" /
                 _ "[" _ MapKeyValues _ "]" /
                 _ "[" _ Expr _ "]" /
                 _ "(" _ Args? _ ")")*)

Type <- "int" / "float"

IndexValues <- IndexValue (_ "," _ IndexValue)*
IndexValue <- Integral _ "=" _ Expr

PrimaryExpr <- "nil" /
               "this" /
               "self" /
               "$" /
               ControlFlowExpr /
               NewExpr /
               Literal /
               BoundName /
               "(" _ Expr _ ")"

ControlFlowExpr <- (IfExpr / SwitchExpr / ReceiveExpr / BlockExpr)

IfExpr <- "if" __ Expr _ BlockExpr
          (_ "elif" __ Expr _ BlockExpr)*
          (_ "else" _ BlockExpr)?

SwitchExpr <- "switch" __ Expr _ "{"
              (_ "case" __ MatchExprs _ ":" _ BlockLevelExprs)+
              (_ "default" _ ":" _ BlockLevelExprs)? _
              "}"

ReceiveExpr <- "receive" __ ReceiveChannels (_ "{"
               (_ "case" __ MatchExprs _ ":" _ BlockLevelExprs _)+
               (_ "timeout" _ ":" _ DecimalIntegral _ BlockLevelExpr)? _
               "}")?

ReceiveChannels <- (Channel / "[" _ Channels _ "]")
Channel <- (ChannelName
                (_ "." _ Name /
                 _ "[" _ Expr _ "]")*)
ChannelName <- Identifier
Channels <- Channel (_ "," _ Channel)*

NewExpr <- "new" _ Name _ "(" _ Args? _ ")"

#
# Literal
#

Literal <- (BaseLiteral / CompositeLiteral)

BaseLiteral <- (BooleanLiteral / NumberLiteral / CharacterLiteral /
                StringLiteral / FunctionLiteral / EnumLiteral)

CompositeLiteral <- (TupleLiteral / ListLiteral / MapLiteral)

BooleanLiteral <- "true" / "false"

NumberLiteral <- (FloatingPoint / Integral)

FloatingPoint <- (DecimalPointLeading / DecimalPointTrailing)
DecimalPointLeading <- [0-9]* "." [0-9]+ ExponentPart?
DecimalPointTrailing <- [0-9]+ ExponentPart
ExponentPart <- [eE] [+-]? [0-9]+

Integral <- (HexIntegral / BinaryIntegral / OctalIntegral / DecimalIntegral)
HexIntegral <- "0x" [0-9a-fA-F]+
BinaryIntegral <- "0b" [01]+
OctalIntegral <- "0" [0-7]+
DecimalIntegral <- [0-9]+

CharacterLiteral <- "'" (EscapeCharacter / NonQuoteCharacter) "'"
EscapeCharacter <- "\\" (
                   [abfnrtv'"\\] /
                   "x" HexDigit HexDigit /
                   "u" HexDigit HexDigit HexDigit HexDigit /
                   "U" HexDigit HexDigit HexDigit HexDigit
                       HexDigit HexDigit HexDigit HexDigit /
                    OctalDigit /
                    OctalDigit OctalDigit /
                    OctalDigit OctalDigit OctalDigit
                   )
HexDigit <- [0-9a-fA-F]
OctalDigit <- [0-7]
NonQuoteCharacter <- [^']

StringLiteral <- ('"' RegularString '"' / 'r"' RawString '"')
RegularString <- (EscapeSequence / [^"])* { $$ = CT(REGULAR_STRING, $0); }
EscapeSequence <- "\\" [btnvfr"\\]
RawString <- [^"]*

FunctionLiteral <- "fn" _ "(" _ Params? _ ")" _ BlockExpr

EnumLiteral <- EnumDefName _ "::" _ EnumName

TupleLiteral <- "<" _ ">" / "<" _ Exprs? _ ">"
Exprs <- Expr (_ "," _ Expr)*

ListLiteral <- "[" _ "]" / "[" _ Exprs? _ "]"

MapLiteral <- "[:]" / "[" _ MapKeyValues? _ "]"
MapKeyValues <- MapKeyValue (_ "," _ MapKeyValue)*
MapKeyValue <- (Literal / Name) _ ":" _ Expr

#
# Match expression
#

MatchExpr <- (MatchLiteral / UnboundName / BoundName) (_ "is" _ UnboundName)?

MatchLiteral <- (MatchBaseLiteral / MatchCompositeLiteral)

MatchBaseLiteral <- (BooleanLiteral /
                     NumberLiteral /
                     CharacterLiteral /
                     StringLiteral /
                     EnumLiteral)

MatchCompositeLiteral <- (MatchTupleLiteral /
                          MatchListLiteral /
                          MatchMapLiteral)

MatchTupleLiteral <- "<" _ ">" / "<" _ MatchExprs? _ ">"
MatchExprs <- MatchExpr (_ "," _ MatchExpr)*

MatchListLiteral <- "[" _ "]" /
                    BoundName "[" _ MatchExpr? _ "]" /
                    "[" _ MatchExprs? _ "]"

MatchMapLiteral <- "[:]" / "[" _ MatchMapKeyValues? _ "]"
MatchMapKeyValues <- MatchMapKeyValue (_ "," _ MatchMapKeyValue)*
MatchMapKeyValue <- (Literal / Name) _ ":" _ MatchExpr

#
# Class definition
#

ClassDef <- "class" __ ClassName _ (":" _ Interfaces _)? "{" _
            ClassMembers _
            "}"
ClassName <- Identifier
Interfaces <- Interface (_ "," _ Interface)*
Interface <- Identifier
ClassMembers <- ClassMember (_ ClassMember / ClassMemberError)*
ClassMember <- (Constructor / Destructor / MemberMethod / MemberProperty)
Constructor <- "this" _ "(" _ Params? _ ")" _ BlockExpr
Destructor <- "~this" _ "(" _ Params? _ ")" _ BlockExpr
MemberMethod <- MemberAccess _ FunctionDef
MemberAccess <- "public" / "private"
MemberProperty <- ((MemberAccess (_ Const)? / Readonly) _ Name (_ "=" _ Expr)?)
ClassMemberError <- ("," / ";") {
    panic("Unexpected %s between members on line %d", $0, auxil->row);
}
Const <- "const"
Readonly <- "readonly"

#
# Interface definition
#

InterfaceDef <- "interface" __ InterfaceName _ "{" _ InterfaceMembers _ "}"
InterfaceName <- Identifier
InterfaceMembers <- InterfaceMember (_ InterfaceMember / InterfaceMemberError)*
InterfaceMember <- (InterfaceMemberMethod / InterfaceMemberProperty)
InterfaceMemberMethod <- MemberAccess _ InterfaceMethod
InterfaceMethod <- "fn" _ FunctionName _ "(" _ Params? _ ")"
InterfaceMemberProperty <- ((MemberAccess (_ Const)? / Readonly) _ Name)
InterfaceMemberError <- ("," / ";") {
    panic("Unexpected %s between members on line %d", $0, auxil->row);
}

#
# Enumeration definition
#

EnumDef <- "enum" __ EnumDefName _ "{" _ Enums _ "}"
EnumDefName <- Identifier
Enums <- Enum (__ Enum / EnumValueError)*
Enum <- EnumName (_ "=" _ Expr)?
EnumName <- Identifier
EnumValueError <- ("," / ";") {
    panic("Unexpected %s between enum values on line %d", $0, auxil->row);
}

#
# Function definition
#

FunctionDef <- Export? _ "fn" __ FunctionName _ "(" _ Params? _ ")" _ BlockExpr
Export <- "export"
FunctionName <- Identifier
Params <- NonDefaultParams _ "," _ DefaultParams /
          NonDefaultParams /
          DefaultParams
NonDefaultParams <- NonDefaultParam
                    (_ "," _ NonDefaultParam)*
NonDefaultParam <- Identifier !(_ "=")
DefaultParams <- DefaultParam (_ "," _ DefaultParam)*
DefaultParam <- DefaultParamName _ "=" _ Expr
DefaultParamName <- Identifier

BlockExpr <- "{" _ BlockLevelExprs _ "}"
BlockLevelExprs <- BlockLevelExpr (_ Comma _ BlockLevelExpr)*
BlockLevelExpr <- (FunctionDef / Expr)
Comma <- "," / ";" {
    panic("Unexpected ';' on line %d (use ',' as a separator between "
          "expressions)", auxil->row);
}
Args <- (PositionalArgs / NamedArgs)
PositionalArgs <- !NamedArg Expr (_ "," _ Expr)*
NamedArgs <- NamedArg (_ "," _ NamedArg)*
NamedArg <- Name _ ":" _ Expr

#
# Misc
#

Identifier <- [a-zA-Z_][a-zA-Z_0-9_]*
Name <- Identifier
BoundName <- Name
UnboundName <- "?" _ Name
#_ <- WS*
#__ <- WS+
_ <- (WS / Comments)*
__ <- (WS / Comments)+
WS <- [ \t\r\n]
Comments <- SingleLineComment / BlockComment
SingleLineComment <- "//" (!EOL .)* EOL?
EOL <- "\r\n" / "\n" / "\r"
BlockComment <- "/*" (BlockCommentContent / EOL)* "*/"
BlockCommentContent <- (!("*/" / EOL) .)
EOF <- _ !.

%%
int main()
