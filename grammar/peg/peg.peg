%prefix "peg"

# Meta-Grammar for Parsing PEG Grammar Files

# Start symbol
Grammar    <- Spacing Rule+ EndOfFile

# A rule
Rule       <- r:Identifier LEFTARROW Expression
    { printf("************* %s", $0); }

# An expression
Expression <- Sequence (SLASH Sequence)*

# A sequence of terms
Sequence   <- Prefix*

# A prefix
Prefix     <- (AND / NOT)? Suffix

# Suffixes
Suffix     <- Primary (QUESTION / STAR / PLUS)?

# Primary expressions
Primary    <- Identifier !LEFTARROW
            / OPEN Expression CLOSE
            / Literal / Class / DOT

# Identifier
Identifier <- IdentStart IdentCont* Spacing

# Literal
Literal    <- ['] (!['] Char)* ['] Spacing
            / ["] (!["] Char)* ["] Spacing

# Character class
Class      <- '[' (!']' Range)* ']' Spacing

# Character ranges
Range      <- Char '-' Char / Char

# Any character
Char       <- '\\' [nrt'"\[\]\\]
            / '\\' [0-2][0-7][0-7]
            / '\\' [0-7][0-7]?
            / !'\\' .

# Lexical rules
LEFTARROW  <- '<-' Spacing
SLASH      <- '/' Spacing
AND        <- '&' Spacing
NOT        <- '!' Spacing
QUESTION   <- '?' Spacing
STAR       <- '*' Spacing
PLUS       <- '+' Spacing
OPEN       <- '(' Spacing
CLOSE      <- ')' Spacing
DOT        <- '.' Spacing

# Ignorable whitespace
Spacing    <- (Space / Comment)*

# Space characters
Space      <- ' ' / '\t' / EndOfLine

# Comments
Comment    <- '#' (!EndOfLine .)* EndOfLine

# End of line
EndOfLine  <- '\r\n' / '\n' / '\r'

# End of file
EndOfFile  <- !.

# Identifier components
IdentStart <- [a-zA-Z_]
IdentCont  <- IdentStart / [0-9]

%%
int main() {
    peg_context_t *context = peg_create(NULL);
    peg_parse(context, NULL);
    peg_destroy(context);
    return 0;
}
