%prefix "satie"

%earlysource {
    static const char *dbg_str[] = { "Evaluating rule", "Matched rule", "Abandoning rule" };
    #define PCC_DEBUG(auxil, event, rule, level, pos, buffer, length) \
        fprintf(stderr, "%*s%s %s @%zu [%.*s]\n", (int)((level) * 2), "", dbg_str[event], rule, pos, (int)(length), buffer)
}

#
# Top level structure
#

Program            <- _ (Imports __)? TopLevelConstructs EOF

Imports            <- Import (__ Import)*
Import             <- "import" __ (Symbol _ "=" _)? _ ModulePath
ModulePath         <- Symbol ("." Symbol)* ("." "*")?

TopLevelConstructs <- TopLevelConstruct (__ TopLevelConstruct)*
TopLevelConstruct  <- StructDef / InterfaceDef / EnumDef / FunctionDef

StructDef          <- ("singleton" __)? "struct" __ Symbol _ ( ":" _ Interfaces _)?
                      "{" _ StructMembers _ "}"

InterfaceDef       <- "interface" __ Interface _ "{" _ InterfaceMembers _ "}"

EnumDef            <- "enum" __ Symbol _ "{" _ EnumValues _ "}"

FunctionDef        <- "fn" __ FunctionName _ "(" _ Params? _ ")" _ BlockExpr

#
# Expressions
#

# FIXME: Add full set of operators below

Expr               <- Or
Or                 <- And (_ "||" _ And)*
And                <- Equality (_ "&&" _ Equality)*
Equality           <- Concatenate (_ "==" _ Concatenate)*
Concatenate        <- Add (_ "~" _ Add)*
Add                <- Multiplicate (_ "+" _  Multiplicate)*
Multiplicate       <- Not (_ ("*" / "/") _  Not)*
Not                <- "!" _ Unary / Unary
Unary              <- ("+" / "-")? _ Indexing / Indexing
Indexing           <- &(Symbol _ "[")
                      Symbol _ "[" _ Expr _ "]"  / FunctionCall
FunctionCall       <- &(Symbol _ "(")
                      Symbol _ "(" _ ExprSequence? _ ")" / FieldAccess
FieldAccess        <- &(HasField _ ".")
                      HasField (_ "." _ HasField)* / ParenthesizedExpr
ParenthesizedExpr  <- "(" _ Expr _ ")" / Primary

HasField           <- Symbol !(_ ("(" / "[")) / Literal / Indexing /
                      FunctionCall

Primary            <- Literal / PrimaryExpr / UnboundVariable / Symbol

Literal            <- FunctionLiteral / ListLiteral / StringLiteral /
                      CharacterLiteral / NumberLiteral / BooleanLiteral /
                      EmptyMapLiteral / SliceLiteral / TupleLiteral /
                      MapLiteral / StructLiteral

PrimaryExpr        <- NewStructExpr / IfExpr / SwitchExpr / MatchExpr /
                      ReceiveExpr / BlockExpr / ThisExpr / SelfExpr

NewStructExpr      <- "new" _ Symbol (_ "(" _ Params+ _ ")")?

IfExpr             <- "if" __ Expr _ BlockExpr
                      (_ "elif" __ Expr _ BlockExpr)*
                      (_ "else" _ BlockExpr)?

SwitchExpr         <- "switch" __ Expr _ "{"
                      (_ "case" _ Expr _ BlockExpr)+
                      (_ "default" _ BlockExpr)?
                      _ "}"

MatchExpr          <- "match" __ Expr _ "{"
                      (_ "case" __ Expr _ BlockExpr)+
                      _ "}"

ReceiveExpr        <- "receive" __ Expr _ "{"
                      (_ "case" _ Expr _ BlockExpr)+
                      (_ "timeout" _ DecimalIntegral _ BlockExpr)?
                      _ "}"

ThisExpr           <- "this"

SelfExpr           <- "self"

FunctionLiteral    <- "fn" _ "(" _ Params _ ")" _ BlockExpr

ListLiteral        <- "[" _ ExprSequence? _ "]" / "[" Expr _ ".." _ Expr "]"

StringLiteral      <- RegularString / RawString
RegularString      <- '"' ( EscapeSequence / [^"] )* '"'
EscapeSequence     <- "\\" [btnvfr"\\]
RawString          <- 'r"' [^"]* '"'

CharacterLiteral   <- "'" ( Escape / NonQuoteChar ) "'"
Escape             <- "\\" ( [abfnrtv'"\\] /
                      "x" HexDigit HexDigit /
                      "u" HexDigit HexDigit HexDigit HexDigit /
                      "U" HexDigit HexDigit HexDigit HexDigit
                          HexDigit HexDigit HexDigit HexDigit /
                      OctalDigit /
                      OctalDigit OctalDigit /
                      OctalDigit OctalDigit OctalDigit )
HexDigit           <- [0-9a-fA-F]
OctalDigit         <- [0-7]
NonQuoteChar       <- [^']

NumberLiteral      <- Integral / FloatingPoint
Integral           <- OctalIntegral / HexIntegral / BinaryIntegral /
                      DecimalIntegral
OctalIntegral      <- "0"[0-7]+
HexIntegral        <- "0x"[0-9a-fA-F]+
BinaryIntegral     <- "0b"[01]+
DecimalIntegral    <- [0-9]+ !("." / [eE])
FloatingPoint      <- [0-9]* "." [0-9]+ ExponentPart? / [0-9]+ ExponentPart
ExponentPart       <- [eE] [+-]? [0-9]+

BooleanLiteral     <- "true" / "false"

EmptyMapLiteral    <- "[" _ ":" _ "]"

SliceLiteral       <- "$"

TupleLiteral       <- "#(" _ ExprSequence? _ ")"
ExprSequence       <- Expr (_ "," _ Expr)*

MapLiteral         <- "[" _ KeyValues _ "]"
KeyValues          <- KeyValue (_ "," _ KeyValue)*
KeyValue           <- Expr _ ":" _ Expr

StructLiteral      <- "@[" _ MemberValues _ "]"
MemberValues       <- MemberValue (_ "," _ MemberValue)*
MemberValue        <- Symbol _ "=" _ Expr

UnboundVariable    <- "?" Symbol

Symbol             <- [a-zA-Z_][a-zA-Z_0-9_]*

#
# Struct definition
#

Interfaces         <- Interface (_ "," _ Interface)*
Interface          <- Symbol
StructMembers      <- StructMember (__ StructMember)*
StructMember       <- Constructor / Deconstructor / MemberFunctionDef /
                      MemberVariableDef
Constructor        <- "this" _ "(" _ Params? _ ")" _ BlockExpr
Deconstructor      <- "~this" _ "(" _ Params? _ ")" _ BlockExpr
MemberFunctionDef  <- MemberAccess _ FunctionDef
MemberAccess       <- "public" / "private"
MemberVariableDef  <- (MemberAccess / Readonly) _ Symbol _ "=" _ Expr
Readonly           <- "readonly"

#
# Interface definition
#

InterfaceMembers   <- InterfaceMember (__ InterfaceMember)*
InterfaceMember    <- InterfaceMemberFunctionDef / InterfaceMemberVariableDef
InterfaceMemberFunctionDef
                   <- MemberAccess _ InterfaceFunctionDef
InterfaceFunctionDef
                   <- "fn" _ FunctionName _ "(" _ Params? _ ")"
InterfaceMemberVariableDef  <- (MemberAccess / Readonly) _ Symbol

#
# Enumeration definition
#

EnumValues         <- EnumValue (__ EnumValue)*
EnumValue          <- Symbol (_ "=" _ Expr)?

#
# Function definition
#

FunctionName       <- Symbol
Params             <- NonDefaultParams _ "," _ DefaultParams /
                      NonDefaultParams /
                      DefaultParams
NonDefaultParams   <- NonDefaultParam (_ "," _ NonDefaultParam)*
NonDefaultParam    <- Symbol !(_ "=")
DefaultParams      <- DefaultParam (_ "," _ DefaultParam)*
DefaultParam       <- Symbol _ "=" _ Expr

BlockExpr          <- "{" _ BlockSequence _ "}"
BlockSequence      <- TopLevelExpr (_ "," _ TopLevelExpr)*
TopLevelExpr       <- Binding / FunctionDef / Expr
Binding            <- MatchPattern _ "=" _ Expr
MatchPattern       <- Literal / FieldAccess / Symbol

#
# Misc
#

_                  <- WS*
__                 <- WS+
#_                  <- (WS / Comments)*
#__                 <- (WS / Comments)+
WS                 <- [ \t\r\n]
#Comments           <- SingleLineComment / BlockComment
#SingleLineComment  <- "//" (!EOL .)* EOL?
#EOL                <- "\r\n" / "\n" / "\r"
#BlockComment       <- "/*" (!"*/" .)* "*/"
EOF                <- _ !.

%%
int main() {
    satie_context_t *context = satie_create(NULL);
    satie_parse(context, NULL);
    satie_destroy(context);
    return 0;
}
