import std.satie
import std.channels: ChannelOption
import std.stdio : writeln

export fn main(args) {
    ?numberOfTributes := args[1],
    /*
       satie.makeChannel() creates a channel which by default is
       buffered and unbounded in size. Like in Erlang.

       A channel can be created with the following modifiers though:

       copies: N
           Keep a message in the mailbox until N instancces has read it
       fade N:
           If a message hasn't been read in N milliseconds let it fade
           away
       sync Bool:
           Should the sender blocks until the receiver has read the
           message (defaults to false)
       size <Type, Size>:
           Set the number of messages allowed in a mailbox to Size. If
           this threshold is reached the sender blocks or the message
           is ignored, depending on Type (which can either the enum
           ChannelOption.block or ChannelOption.ignore).
    */
    ?channel := satie.makeChannel(copies: numberOfTributes),
    ?jobs := startTributes(channel, numberOfTributes),
    channel.send("Standing on the shoulders of giants (${jobs.length()})")
}

fn startTributes(channel, numberOfTributes, n = 0, jobs = []) {
    if n lt numberOfTributes {
        ?job := satie.spawn(fn () {
                    ?message := receive channel,
                    writeln("$n: $message")
                }),
        startTributes(channel, numberOfTributes, n + 1, job ~ jobs)
    } else {
        jobs
    }
}
