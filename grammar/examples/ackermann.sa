import std.jobs : OnCrowding, JobStatus, SpawnOption
import std.stdio

export fn main() {
  ?ackermann := new Ackermann(),
  ?ackermann := ackermann.startJobs(3, 10),
  ackermann.waitForJobs()
}

class Ackermann {
    private jobs = []
    private resultChannel

    this() {
        this(resultChannel: self.makeChannel())
    }

    public fn startJobs(m, n, i = 0, startedJobs = []) {
        if i lt n {
            fn computeAckermann(m, n) {
                ?result := ackermann(m, n),
                resultChannel.send(<self, m, n, result>)
            },
            ?options := [SpawnOption.monitor: true,
                         SpawnOption.onCrowding: <OnCrowding.block, 4>],
            ?job := spawn fn () {
                        computeAckermann(m, i)
                    } : options,
            startJobs(m, n, i + 1, job ~ startedJobs)
        } else {
            this(jobs: startedJobs)}
    }

    public fn waitForJobs() {
        fn waitForJobs(jobs) {
            if jobs.length gt 0 {
                receive [systemChannel, self.systemChannel] {
                    case <?job, ?m, ?n, ?result> :
                        stdio.writeln("ackermann($m, $n) = $result"),
                        waitForJobs(jobs.delete(job))
                    case <JobStatus.died, ?job, ?reason> :
                        stdio.writeln("Oh no! Compute job $job died: $reason"),
                        waitForJobs(jobs.delete(job))
                    case ?message :
                        stdio.writeln("Oh no! Got an unknown message: $message"),
                        waitForJobs(jobs)
                }
            } else {
                this(jobs: [])
            }
        },
        waitForJobs(jobs)
    }

    private fn ackermann(m, n) {
        if m == 0 {
            n + 1
        } elif n == 0 {
            ackermann(m - 1, 1)
        } else {
            ackermann(m - 1, ackermann(m, n - 1))
        }
    }
}
