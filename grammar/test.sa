import a.b.c
import d = a.b.c
import a.b.c : Type

singleton struct Foo {
    this(a) {
        a
    }
    public a = 1
    public const b = 2 + a
    private c = 3
    private const d = 2 * c
    readonly e = (a + b) * c + d
    public fn foo(a) {
        a
    }
    private fn bar(a) {
        a
    }

}

fn main() {
   match a {
     case b {
       c
     }
   },


    match a = b,



            receive {
                case a {
                   stdio.writeln("Oh no! Compute job $job died: $reason"),
                    b
                }
            },




    lists.foreach(fn () { stdio.writeln(item.toString())}, items),
    this.a = foo,
    a = 1,
    #(1, 2) = a,
    a = 1 + (2 + a) + 1,
    foo(),
    foo[1].baz.bonk,
    ?len = if true {
               a
           } else {
               b
           }.length()
}
