import a.b.c
import d = a.b.c
import a.b.c : Type

struct Foo {
    this(a) {
        a
    }
    public a = 1
    public const b = 2 + a
    private c = 3
    private const d = 2 * c
    readonly e = (a + b) * c + d
    public fn foo(a) {
        a
    }
    private fn bar(a) {
        a
    }

}

fn main() {
    {
        ?a <- 3
    },
    ?b <- b[a: 4],
    ?a <- a[1, 2, 3],
    [b: 2],
    [1, 2] <- a,
    ?a <- a[1 = 2],
    a[b] <- 3,
    ?ackermann <- new Ackermann(),
    ackermann <- startJobs(3, 10),
    a[1],
    1 <- 1,
    switch a {
        case b {
            c
        }
    },
    #(1, 2),
    receive {
        case a {
            stdio.writeln("Oh no! Compute job $job died: $reason"),
            b
        }
    },
    lists.foreach(fn () { stdio.writeln(item.toString())}, items),
    a <- 1,
    #(1, 2) <- a,
    a <- 1 + (2 + a) + 1,
    foo(),
    foo[1].baz.bonk,
    ?len <- if true {
                a
            } else {
                b
            }.length()
}
