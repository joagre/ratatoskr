import std.jobs : OnCrowding, Job
import std.stdio
import std.lists

export fn main() {
  ?ackermann = new Ackermann(),
  ?ackermann = ackermann.startJobs(3, 10),
  ackermann.waitForJobs()
}

class Ackermann {
    private jobs = []

    public fn startJobs(m, n, i = 0) {
        if i < n {
            fn computeAckermann(parentJob, m, n) {
                ?result = ackermann(m, n),
                parentJob <| #(self, m, n, result)
            },
            ?job = spawn monitor computeAckermann(self, m, i),
            job.setMaxMailboxSize(job, 4, OnCrowding.block),
            jobs => job ~ jobs,
            startJobs(m, n, i + 1)
        } else {
            this
        }
    }

    public fn waitForJobs() {
        if jobs.length > 0 {
            receive {
                case #(?job, ?m, ?n, ?result) {
                    stdio.writeln("ackermann($m, $n) = $result"),
                    jobs => jobs.delete(job),
                    waitForJobs()
                }
                case #(Job.died, ?job, ?reason) {
                    stdio.writeln("Oh no! Compute job $job died: $reason")
                }
            }
        } else {
            this
        }
    }

    private fn ackermann(m, n) {
        if m == 0 {
            n + 1
        } elif n == 0 {
            ackermann(m - 1, 1)
        } else {
            ackermann(m - 1, ackermann(m, n - 1))
        }
    }
}
