%prefix "satie"

%earlysource {
    static const char *dbg_str[] = { "Evaluating rule", "Matched rule", "Abandoning rule" };
    #define PCC_DEBUG(auxil, event, rule, level, pos, buffer, length) \
        fprintf(stderr, "%*s%s %s @%zu [%.*s]\n", (int)((level) * 2), "", dbg_str[event], rule, pos, (int)(length), buffer)
}

#
# Top level structure
#

Program            <- _ (Imports __)? TopLevelConstructs EOF

Imports            <- Import (__ Import)*

Import             <- "import" __ (Symbol _ "=" _)? _ ModulePath
ModulePath         <- Symbol ("." Symbol)* ("." "*")?

TopLevelConstructs <- TopLevelConstruct (__ TopLevelConstruct)*
TopLevelConstruct  <- StructDef / InterfaceDef / EnumDef / FunctionDef

StructDef          <- ("singleton" __)? "struct" __ Symbol _ ( ":" _ Interfaces _)?
                      "{" _ StructMembers _ "}"

InterfaceDef       <- "interface" __ Interface _ "{" _ InterfaceMembers _ "}"

EnumDef            <- "enum" __ Symbol _ "{" _ EnumValues _ "}"

FunctionDef        <- "fn" __ FunctionName _ "(" _ Params? _ ")" _ Block

#
# Expressions
#

Expr               <- Rebinding
Rebinding          <- Or (_ "=" _ Or)*
Or                 <- And (_ "||" _ And)*
And                <- Add (_ "&&" _ Add)*
Add                <- Multiplicate (_ ("+" / "-") _ Multiplicate)*
Multiplicate       <- Not (_ ("*" / "/") _  Not)*
Not                <- "!" _ Unary / Unary
Unary              <- ("+" / "-")? FunctionCall
#FunctionCall       <- &(FunctionName _ "(")q
#                      FunctionName _ "(" _ ExprSequence? _ ")" / MemberAccessOp
FunctionCall       <- FunctionName _ "(" _ ExprSequence? _ ")" / MemberAccessOp

#MemberAccessOp     <- &(Primary _ ".") Primary (_ "." _ Primary)*
MemberAccessOp     <- Primary (_ "." _ Primary)*

Primary            <- Struct / If / Switch / Match / Receive / Block /
                      ParanthesizedExpr / Function /
                      Tuple / Map /
                      Array / String / Character / Number / Boolean / EmptyMap /
                      Slice / This / Self / UnboundVariable / Symbol

Struct             <- "struct" _ Symbol

If                 <- "if" __ Expr _ Block
                      (_ "elif" __ Expr _ Block)*
                      (_ "else" _ Block)?

Switch             <- "switch" __ Expr _ "{"
                      (_ "case" _ Expr _ Block)+
                      (_ "default" _ Block)?
                      _ "}"

Match              <- "match" __ Expr _ "{"
                      (_ "case" __ Expr _ Block)+
                      _ "}"

Receive            <- "receive" __ Expr _ "{"
                      (_ "case" _ Expr _ Block)+
                      (_ "timeout" _ DecimalIntegral _ Block)?
                      _ "}"

ParanthesizedExpr  <- "(" _ Expr _ ")"

Function           <- "fn" _ "(" _ Params _ ")" _ Block

Tuple              <- "#(" _ ExprSequence? _ ")"
ExprSequence      <- Expr (_ "," _ Expr)*

Map                <- "[" _ KeyValues _ "]"
KeyValues          <- KeyValue (_ "," _ KeyValues)*
KeyValue           <- Key _ ":" _ Value
Key                <- Expr
Value              <- Expr

Array              <- "[" _ ExprSequence? _ "]" / "[" Expr _ ".." _ Expr "]"


String             <- RegularString / RawString
RegularString      <- '"' ( EscapeSequence / [^"] )* '"'
EscapeSequence     <- "\\" [btnvfr"\\]
RawString          <- 'r"' [^"]* '"'

Character          <- "'" ( Escape / NonQuoteChar ) "'"
Escape             <- "\\" ( [abfnrtv'"\\] /
                      "x" HexDigit HexDigit /
                      "u" HexDigit HexDigit HexDigit HexDigit /
                      "U" HexDigit HexDigit HexDigit HexDigit
                          HexDigit HexDigit HexDigit HexDigit /
                      OctalDigit /
                      OctalDigit OctalDigit /
                      OctalDigit OctalDigit OctalDigit )
HexDigit           <- [0-9a-fA-F]
OctalDigit         <- [0-7]
NonQuoteChar       <- [^']

Number             <- Integral / FloatingPoint
Integral           <- OctalIntegral / HexIntegral / BinaryIntegral /
                      DecimalIntegral
OctalIntegral      <- "0"[0-7]+
HexIntegral        <- "0x"[0-9a-fA-F]+
BinaryIntegral     <- "0b"[01]+
DecimalIntegral    <- [0-9]+ !("." / [eE])
FloatingPoint      <- [0-9]* "." [0-9]+ ExponentPart? / [0-9]+ ExponentPart
ExponentPart       <- [eE] [+-]? [0-9]+

Boolean            <- "true" / "false"

EmptyMap           <- "[" _ ":" _ "]"

Slice              <- "$"

This               <- "this"

Self               <- "self"

UnboundVariable    <- "?" Variable

Variable           <- Symbol

Symbol             <- [a-zA-Z_][a-zA-Z_0-9_]*

#
# Struct definition
#

Interfaces         <- Interface (_ "," _ Interface)*
Interface          <- Symbol
StructMembers      <- StructMember (__ StructMember)*
StructMember       <- Constructor / Deconstructor / MemberVariableDef /
                      MemberFunctionDef
Constructor        <- "this" _ "(" _ Params? _ ")" _ Block
Deconstructor      <- "~this" _ "(" _ Params? _ ")" _ Block
MemberVariableDef  <- ((MemberAccess _ BindingType) / Readonly) _ Variable (_ "=" _ Expr)?
MemberAccess       <- "public" / "private"
Readonly           <- "readonly"
MemberFunctionDef  <- MemberAccess _ FunctionDef

#
# Interface definition
#

InterfaceMembers   <- InterfaceMember (__ InterfaceMember)*
InterfaceMember    <- InterfaceMemberVariableDef / InterfaceMemberFunctionDef
InterfaceMemberVariableDef  <-
                   ((MemberAccess _ BindingType) / Readonly) _ Variable
InterfaceMemberFunctionDef
                   <- MemberAccess _ InterfaceFunctionDef
InterfaceFunctionDef
                   <- "fn" _ FunctionName _ "(" _ Params? _ ")"

#
# Enumeration definition
#

EnumValues         <- EnumValue (__ EnumValue)*
EnumValue          <- Symbol (_ "=" _ Expr)?

#
# Function definition
#

Block              <- "{" _ BlockSequence _ "}"
BlockSequence      <- TopLevelExpr (_ "," _ TopLevelExpr)*
#TopLevelExpr      <- Binding / SimpleMatch / FunctionDef / Expr
TopLevelExpr       <- Binding / FunctionDef / Expr

Binding            <- BindingType _ Symbol _ "=" _ Expr
BindingType        <- "const" / "var"

FunctionName       <- Symbol
Params             <- NonDefaultParams _ "," _ DefaultParams /
                      NonDefaultParams /
                      DefaultParams
NonDefaultParams   <- NonDefaultParam (_ "," _ NonDefaultParam)*
NonDefaultParam    <- Param !(_ "=")
DefaultParams      <- DefaultParam (_ "," _ DefaultParam)*
DefaultParam       <- Param _ "=" _ Expr
Param              <- By _ Symbol
By                 <- "val" / "ref"

#SimpleMatch        <- "match" __  Expr _ "=" _ Expr

#
# Misc
#

_                  <- WS*
__                 <- WS+
#_                  <- (WS / Comments)*
#__                 <- (WS / Comments)+
WS                 <- [ \t\r\n]
#Comments           <- SingleLineComment / BlockComment
#SingleLineComment  <- "//" (!EOL .)* EOL?
#EOL                <- "\r\n" / "\n" / "\r"
#BlockComment       <- "/*" (!"*/" .)* "*/"
EOF                <- _ !.

%%
int main() {
    satie_context_t *context = satie_create(NULL);
    satie_parse(context, NULL);
    satie_destroy(context);
    return 0;
}
