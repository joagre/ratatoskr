%prefix "satie"

%earlysource {
    static const char *dbg_str[] = { "Evaluating rule", "Matched rule", "Abandoning rule" };
    #define PCC_DEBUG(auxil, event, rule, level, pos, buffer, length) \
        fprintf(stderr, "%*s%s %s @%zu [%.*s]\n", (int)((level) * 2), "", dbg_str[event], rule, pos, (int)(length), buffer)
}

#
# Top level structure
#

Program            <- _ (Import _)* _
                      (TopLevelConstructs _)* _
                      MainFunctionDef? _
                      (TopLevelConstructs _)*
                      EOF

Import             <- "import" __ (Symbol _ "=" _)? _ ModulePath _ ";"
ModulePath         <- Symbol ("." Symbol)* ("." "*")?

TopLevelConstructs <- StructDef / InterfaceDef / EnumDef / FunctionDef

#
# Expressions
#

Expr               <- Or

#This               <- "this" (_ "." _ Or)*

Or                 <- And (_ "||" _ And)*
And                <- Add (_ "&&" _ Add)*
Add                <- Multiplicate (_ ("+" / "-") _ Multiplicate)*
Multiplicate       <- Not (_ ("*" / "/") _  Not)*
Not                <- "!" _ Unary / Unary
Unary              <- ("+" / "-")? Primary

Primary            <- Struct / If / Switch / Match / Receive / Block / Tuple /
                      FunctionCall / MemberAccessOp / ParanthesizedExpr /
                      Function / Map / Array / String / Character / Number /
                      Boolean / EmptyMap / Slice / This / Self / Variable /
                      UnboundVariable / Symbol

Struct             <- "struct" _ Symbol

If                 <- "if" __ Expr _ Block
                      (_ "elif" __ Expr _ Block)*
                      (_ "else" _ Block)?

Switch             <- "switch" __ Expr _ "{"
                      (_ "case" _ Expr _ Block)+
                      (_ "default" _ Block)?
                      _ "}"

Match              <- "match" __ Expr _ "{"
                      (_ "case" __ Expr _ Block)+
                      _ "}"

Receive            <- "receive" __ Expr _ "{"
                      (_ "case" _ Expr _ Block)+
                      (_ "timeout" _ DecimalIntegral _ Block)?
                      _ "}"

Tuple              <- "#(" _ ExprSequence? _ ")"

FunctionCall       <- !(FunctionName _ ".") FunctionName _ "(" _ ExprSequence? _ ")"

MemberAccessOp     <- Expr _ "." _ Expr

ParanthesizedExpr  <- "(" _ Expr _ ")"

Function           <- "fn" _ "(" _ Params _ ")" _ Block

Map                <- "[" _ KeyValues _ "]"
KeyValues          <- KeyValue (_ "," _ KeyValues)*
KeyValue           <- Key _ ":" _ Value
Key                <- Expr
Value              <- Expr

Array              <- "[" _ ExprSequence? _ "]" / "[" Expr _ ".." _ Expr "]"


String             <- RegularString / RawString
RegularString      <- '"' ( EscapeSequence / [^"] )* '"'
EscapeSequence     <- "\\" [btnvfr"\\]
RawString          <- 'r"' [^"]* '"'

Character          <- "'" ( Escape / NonQuoteChar ) "'"
Escape             <- "\\" ( [abfnrtv'"\\] /
                      "x" HexDigit HexDigit /
                      "u" HexDigit HexDigit HexDigit HexDigit /
                      "U" HexDigit HexDigit HexDigit HexDigit
                          HexDigit HexDigit HexDigit HexDigit /
                      OctalDigit /
                      OctalDigit OctalDigit /
                      OctalDigit OctalDigit OctalDigit )
HexDigit           <- [0-9a-fA-F]
OctalDigit         <- [0-7]
NonQuoteChar       <- [^']

Number             <- Integral / FloatingPoint
Integral           <- OctalIntegral / HexIntegral / BinaryIntegral /
                      DecimalIntegral
OctalIntegral      <- "0"[0-7]+
HexIntegral        <- "0x"[0-9a-fA-F]+
BinaryIntegral     <- "0b"[01]+
DecimalIntegral    <- [0-9]+ !("." / [eE])
FloatingPoint      <- [0-9]* "." [0-9]+ ExponentPart? / [0-9]+ ExponentPart
ExponentPart       <- [eE] [+-]? [0-9]+

Boolean            <- "true" / "false"

EmptyMap           <- "[" _ ":" _ "]"

Slice              <- "$"

This               <- "this"

Self               <- "self"

Variable           <- Symbol

UnboundVariable    <- "?" Variable

Symbol             <- [a-zA-Z_][a-zA-Z_0-9_]*

#
# Struct
#

StructDef          <- ("singleton" _)? "struct" _ Symbol _
                      ( ":" _ Interfaces _)? "{" _
                      StructMembers _ "}"
Interfaces         <- Symbol (_ "," _ Symbol)*
StructMembers      <- StructMember _ ";" (_ StructMembers)*
StructMember       <- Constructor / Deconstructor / MemberVariableDef /
                      MemberFunctionDef
Constructor        <- "this" _ "(" _ Params? _ ")" _ Block
Deconstructor      <- "~this" _ "(" _ Params? _ ")" _ Block
MemberVariableDef  <- MemberVisibility _ (MemberAccess _)? _ !"fn" Variable
                      (_ "=" _ Expr)?
MemberFunctionDef  <- MemberVisibility _ (MemberAccess _)? FunctionDef
MemberVisibility   <- "public" / "private"
MemberAccess       <- "const" / "readonly"

#
# Interface
#

InterfaceDef        <- "interface" _ Symbol _ "{" _ InterfaceMembers _ "}"
InterfaceMembers    <- InterfaceMember _ ";" (_ InterfaceMembers)*
InterfaceMember     <- InterfaceMemberVariableDef / InterfaceMemberFunctionDef
InterfaceMemberVariableDef <-
                       MemberVisibility _ (MemberAccess _)? _ !"fn" Variable
InterfaceMemberFunctionDef <-
                       MemberVisibility _ (MemberAccess _)? InterfaceFunctionDef
InterfaceFunctionDef <-
                       "fn" _ FunctionName _ "(" _ Params? _ ")"

#
# Enum
#

EnumDef            <- "enum" _ Symbol _ "{" _ EnumValues _ "}"
EnumValues         <- EnumValue (_ "," _ EnumValue)*
EnumValue          <- Symbol (_ "=" _ Expr)?

MainFunctionDef    <- "fn" _ "main" _ "(" _ Param? _ ")" _ Block
Param              <- Symbol
Block              <- "{" _ StatementSequence _ "}"
StatementSequence  <- Statement _ ";"  (_ StatementSequence)*
Statement          <- Assignment / FunctionDef / MatchOp /Expr

Assignment         <- Variable _ "=" _ Expr
FunctionDef        <- "fn" _ !"main" FunctionName _ "(" _ Params? _ ")" _ Block
FunctionName       <- Symbol
Params             <- NonDefaultParams _ "," _ DefaultParams /
                      NonDefaultParams /
                      DefaultParams
NonDefaultParams   <- NonDefaultParam (_ "," _ NonDefaultParam)*
NonDefaultParam    <- Param !(_ "=")
DefaultParams      <- DefaultParam (_ "," _ DefaultParam)*
DefaultParam       <- Param _ "=" _ Expr

MatchOp            <- Expr _ "<*" _ Expr

#
# Misc
#

ExprSequence      <- Expr (_ "," _ Expr)*
_                 <- WS*
__                <- WS+
#_                  <- (WS / Comments)*
#__                 <- (WS / Comments)+
WS                 <- [ \t\r\n]
#Comments           <- SingleLineComment / BlockComment
#SingleLineComment  <- "//" (!EOL .)* EOL?
#EOL                <- "\r\n" / "\n" / "\r"
#BlockComment       <- "/*" (!"*/" .)* "*/"
EOF                <- _ !.

%%
int main() {
    satie_context_t *context = satie_create(NULL);
    satie_parse(context, NULL);
    satie_destroy(context);
    return 0;
}
