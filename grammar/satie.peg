%prefix "satie"

%header {
    #include <stdarg.h>
    #include "satie_auxil.h"
    /*
    static const char *dbg_str[] = { "Evaluating rule", "Matched rule", "Abandoning rule" };
    #define PCC_DEBUG(auxil, event, rule, level, pos, buffer, length) \
    if (strcmp(rule, "WS") != 0 && strcmp(rule, "_") != 0 && strcmp(rule, "__") != 0) \
        fprintf(stderr, "%*s%s %s @%zu [%.*s]\n", (int)((level) * 2), "", dbg_str[event], \
                rule, pos, (int)(length), buffer)
*/
}

%auxil "satie_auxil_t*"
%value "ast_node_t*"

%source {
#define PCC_GETCHAR(auxil) satie_getchar(auxil)
#define PCC_ERROR(auxil) satie_error(auxil)
}

#
# Top level structure
#

Program <- _ (i:Imports __)? t:TopLevelDefs EOF {
    $$ = CCN(PROGRAM, 2, i, t);
}
TopLevelDefs <- t:TopLevelDef { AN(TOP_LEVEL_DEFS, t); } (__ t:TopLevelDef { AN(TOP_LEVEL_DEFS, t); } / TopDefError)* {
    $$ = CSN(TOP_LEVEL_DEFS);
}
TopLevelDef <- (t:ClassDef / t:InterfaceDef / t:EnumDef / t:FunctionDef) { $$ = t; }
TopDefError <- ("," / ";") {
    panic("Unexpected %s between top level definitions on line %d",
          $0, auxil->row);
}

#
# Import
#

Imports <- i:Import { AN(IMPORT, i); } (__ i:Import { AN(IMPORT, i); })* {
    $$ = CSN(IMPORTS);
}
Import <- "import" __ (a:Alias _ "=" _)? _ m:Module (_ ":" _ i:ImportedNames)? {
    $$ = CCN(IMPORT, 3, a, m, i);
}
Alias <- Identifier {
    $$ = CT(ALIAS, $0);
}
Module <- ModuleComponent RemainingModule? {
    $$ = CSN(MODULE);
}
ModuleComponent <- Identifier {
    AT(MODULE_COMPONENT, $0);
}
RemainingModule <- "." ModuleComponent RemainingModule?
ImportedNames <- ImportedName RemainingImportedNames? {
    $$ = CSN(IMPORTED_NAMES);
}
ImportedName <- Identifier {
    AT(IMPORTED_NAME, $0);
}
RemainingImportedNames <- _ "," _ ImportedName RemainingImportedNames?

#
# Expression
#

Expr <- e:BindExpr { $$ = e; }
BindExpr <- l:MatchExpr _ ":=" _ e:Expr { $$ = CCN(BIND_EXPR, 2, l, e); } /
            e:LogicalOrExpr { $$ = e; }
LogicalOrExpr <- l:LogicalOrExpr _ "||" _ e:LogicalAndExpr { $$ = CCN(OR, 2, l, e); } /
                 e:LogicalAndExpr { $$ = e; }
LogicalAndExpr <- l:LogicalAndExpr _ "&&" _ e:BitwiseAndExpr { $$ = CCN(AND, 2, l, e); } /
                  e:BitwiseAndExpr { $$ = e; }
BitwiseAndExpr <- l:BitwiseAndExpr _ "&" _ e:BitwiseXorExpr { $$ = CCN(BITWISE_AND, 2, l, e); } /
                  e:BitwiseXorExpr { $$ = e; }
BitwiseXorExpr <- l:BitwiseXorExpr _ "^" _ e:BitwiseOrExpr { $$ = CCN(BITWISE_XOR, 2, l, e); } /
                  e:BitwiseOrExpr { $$ = e; }
BitwiseOrExpr <- l:BitwiseOrExpr _ "|" _ e:GreaterThanEqualExpr { $$ = CCN(BITWISE_OR, 2, l, e); } /
                 e:GreaterThanEqualExpr { $$ = e; }
GreaterThanEqualExpr <- l:GreaterThanEqualExpr _ "gte" _ e:GreaterThanExpr { $$ = CCN(GTE, 2, l, e); } /
                        e:GreaterThanExpr { $$ = e; }
GreaterThanExpr <- l:GreaterThanExpr _ "gt" _ e:LessThanEqualExpr { $$ = CCN(GT, 2, l, e); } /
                   e:LessThanEqualExpr { $$ = e; }
LessThanEqualExpr <- l:LessThanEqualExpr _ "lte" _ e:LessThanExpr { $$ = CCN(LTE, 2, l, e); } /
                     e:LessThanExpr { $$ = e; }
LessThanExpr <- l:LessThanExpr _ "lt" _ e:NotEqualExpr { $$ = CCN(LT, 2, l, e); } /
                e:NotEqualExpr { $$ = e; }
NotEqualExpr <- l:NotEqualExpr _ "!=" _ e:EqualExpr { $$ = CCN(NE, 2, l, e); } /
                e:EqualExpr { $$ = e; }
EqualExpr <- l:EqualExpr _ "==" _ e:InExpr { $$ = CCN(EQ, 2, l, e); } /
             e:InExpr { $$ = e; }
InExpr <- l:InExpr _ "in" _ e:RightShiftExpr { $$ = CCN(IN, 2, l, e); } /
          e:RightShiftExpr { $$ = e; }
RightShiftExpr <- l:RightShiftExpr _ "bsr" _ e:LeftShiftExpr { $$ = CCN(BSR, 2, l, e); } /
                  e:LeftShiftExpr { $$ = e; }
LeftShiftExpr <- l:LeftShiftExpr _ "bsl" _ e:ConcatenateExpr { $$ = CCN(BSL, 2, l, e); } /
                 e:ConcatenateExpr { $$ = e; }
ConcatenateExpr <- l:ConcatenateExpr _ "~" _ e:MinusExpr { $$ = CCN(CONCATENATE, 2, l, e); } /
                   e:MinusExpr { $$ = e; }
MinusExpr <- l:MinusExpr _ "-" _ e:PlusExpr { $$ = CCN(MINUS, 2, l, e); } /
             e:PlusExpr { $$ = e; }
PlusExpr <- l:PlusExpr _ "+" _ e:ModulusExpr { $$ = CCN(PLUS, 2, l, e); } /
            e:ModulusExpr { $$ = e; }
ModulusExpr <- l:ModulusExpr _ "%" _ e:DivideExpr { $$ = CCN(MODULUS, 2, l, e); } /
               e:DivideExpr { $$ = e; }
DivideExpr <- l:DivideExpr _ "/" _ e:MultiplicateExpr { $$ = CCN(DIVIDE, 2, l, e); } /
              e:MultiplicateExpr { $$ = e; }
MultiplicateExpr <- l:MultiplicateExpr _ "*" _ e:ExponentiationExpr { $$ = CCN(MULTIPLY, 2, l, e); } /
                    e:ExponentiationExpr { $$ = e; }
ExponentiationExpr <- l:ExponentiationExpr _ "^^" _ e:CastExpr { $$ = CCN(EXPONENTIATE, 2, l, e); } /
                      e:CastExpr { $$ = e; }
CastExpr <- "cast" _ "(" _ (l:CastInt / l:CastFloat) _ ")" _ e:BitwiseComplementExpr { $$ = CCN(CAST, 2, l, e); } /
            e:BitwiseComplementExpr { $$ = e; }
BitwiseComplementExpr <- "~" _ e:NotExpr { $$ = CCN(BITWISE_COMPLEMENT, 1, e); } /
                         e:NotExpr { $$ = e; }
NotExpr <- "!" _ e:UnaryPlusExpr { $$ = CCN(NOT, 1, e); } /
           e:UnaryPlusExpr { $$ = e; }
UnaryPlusExpr <- "+" _ e:UnaryMinusExpr { $$ = CCN(UNARY_PLUS, 1, e); } /
                 e:UnaryMinusExpr { $$ = e; }
UnaryMinusExpr <- "-" _ e:PostfixExpr { $$ = CCN(UNARY_MINUS, 1, e); } /
                  e:PostfixExpr { $$ = e; }
PostfixExpr <- p:PrimaryExpr { AN(POSTFIX_EXPR, p); }
               (_ "." _ i:Identifier { AN(POSTFIX_EXPR, i); } /
                "(" _ a:Args? { AN(POSTFIX_EXPR, a); } _ ")" /
                "[" _ e:Expr { AN(POSTFIX_EXPR, e); } _ "]")* {
    $$ = CSN(POSTFIX_EXPR);
}

CastInt <- "int" { $$ = CT(CAST_INT, NULL); }
CastFloat <- "float" { $$ = CT(CAST_FLOAT, NULL); }

# Expr <- BindExpr
# BindExpr <- MatchExpr _ ":=" _ Expr / LogicalOrExpr
# LogicalOrExpr <- LogicalAndExpr (_ "||" _ LogicalAndExpr)*
# LogicalAndExpr <- BitwiseAndExpr (_ "&&" _ BitwiseAndExpr)*
# BitwiseAndExpr <- BitwiseXorExpr (_ "&" _ BitwiseXorExpr)*
# BitwiseXorExpr <- BitwiseOrExpr (_ "^" _ BitwiseOrExpr)*
# BitwiseOrExpr <- GreaterThanEqualExpr (_ "|" _ GreaterThanEqualExpr)*
# GreaterThanEqualExpr <- GreaterThanExpr (_ "gte" _ GreaterThanExpr)*
# GreaterThanExpr <- LessThanEqualExpr (_ "gt" _ LessThanEqualExpr)*
# LessThanEqualExpr <- LessThanExpr (_ "lte" _ LessThanExpr)*
# LessThanExpr <- NotEqualExpr (_ "lt" _ NotEqualExpr)*
# NotEqualExpr <- EqualExpr (_ "!=" _ EqualExpr)*
# EqualExpr <- InExpr (_ "==" _ InExpr)*
# InExpr <- RightShiftExpr (_ "in" _ RightShiftExpr)*
# RightShiftExpr <- LeftShiftExpr (_ "bsr" _ LeftShiftExpr)*
# LeftShiftExpr <- ConcatenateExpr (_ "bsl" _ ConcatenateExpr)*
# ConcatenateExpr <- MinusExpr (_ "~" _ MinusExpr)*
# MinusExpr <- PlusExpr (_ "-" _ PlusExpr)*
# PlusExpr <- ModulusExpr (_ "+" _ ModulusExpr)*
# ModulusExpr <- DivideExpr (_ "%" _ DivideExpr)*
# DivideExpr <- MultiplicateExpr (_ "/" _ MultiplicateExpr)*
# MultiplicateExpr <- ExponentiationExpr (_ "*" _ ExponentiationExpr)*
# ExponentiationExpr <- CastExpr (_ "^^" _ CastExpr)*
# CastExpr <- "cast" _ "(" _ ("int" / "float") _ ")" _ BitwiseComplementExpr /
#             BitwiseComplementExpr
# BitwiseComplementExpr <- "~" _ NotExpr / NotExpr
# NotExpr <- "!" _ UnaryPlusExpr / UnaryPlusExpr
# UnaryPlusExpr <- "+" _ UnaryMinusExpr / UnaryMinusExpr
# UnaryMinusExpr <- "-" _ PostfixExpr / PostfixExpr
# PostfixExpr <- PrimaryExpr _ (
#                               "." _ Identifier /
#                               "(" _ Args? _ ")" /
#                               "[" _ Expr _ "]"
#                              )*

PrimaryExpr <- "nil" { $$ = CT(NIL, NULL); } /
               "this" { $$ = CT(THIS, NULL); } /
               "self" { $$ = CT(SELF, NULL); } /
               "$" { $$ = CT(SLICE_LENGTH, NULL); } /
               e:ControlFlowExpr { $$ = e; } /
               e:NewExpr { $$ = e; } /
               e:Literal { $$ = e; } /
               e:BoundName { $$ = e; } /
               "(" _ e:Expr _ ")" { $$ = e; }

ControlFlowExpr <- IfExpr / SwitchExpr / ReceiveExpr / BlockExpr

IfExpr <- "if" __ Expr _ BlockExpr
          (_ "elif" __ Expr _ BlockExpr)*
          (_ "else" _ BlockExpr)?

SwitchExpr <- "switch" __ Expr (_ "is" _ UnboundedName)? _ "{"
             (_ "case" __ MatchExprs _ ":" _ BlockLevelExprs)+ _
             (_ "default" _ ":" _ BlockLevelExprs)? _
             "}"
UnboundedName <- "?" _ Identifier

ReceiveExpr <- "receive" __ Channels (_ "{"
                    (_ "case" __ MatchExprs _ ":" _ BlockLevelExprs _)+
                    (_ "timeout" _ ":" _ DecimalIntegral _ BlockLevelExpr)? _
               "}")?

Channels <- Dereference / "[" _ Dereferences _ "]"
Dereference <- Identifier (_ "." _ Identifier / _ "[" _ Expr _ "]")*
Dereferences <- Dereference (_ "," _ Dereference)*

NewExpr <- "new" _ Identifier _ "(" _ Args? _ ")"

BoundName <- Identifier {
    $$ = CT(BOUND_NAME, $0);
}

#
# Literal
#

Literal <- BaseLiteral / CompositeLiteral

BaseLiteral <- BooleanLiteral /
               NumberLiteral /
               CharacterLiteral /
               StringLiteral /
               FunctionLiteral /
               EnumLiteral

CompositeLiteral <- TupleLiteral /
                    (BoundName _)? ListLiteral /
                    (BoundName _)? MapLiteral

BooleanLiteral <- "true" / "false"

NumberLiteral <- FloatingPoint / Integral
Integral <- HexIntegral / BinaryIntegral / OctalIntegral / DecimalIntegral
FloatingPoint <- DecimalPointLeading / DecimalPointTrailing
DecimalPointLeading <- [0-9]* "." [0-9]+ ExponentPart?
DecimalPointTrailing <- [0-9]+ ExponentPart
ExponentPart <- [eE] [+-]? [0-9]+
DecimalIntegral <- [0-9]+
OctalIntegral <- "0" [0-7]+
HexIntegral <- "0x" [0-9a-fA-F]+
BinaryIntegral <- "0b" [01]+

CharacterLiteral <- "'" ( Escape / NonQuoteChar ) "'"
Escape <- "\\" ( [abfnrtv'"\\] /
                 "x" HexDigit HexDigit /
                 "u" HexDigit HexDigit HexDigit HexDigit /
                 "U" HexDigit HexDigit HexDigit HexDigit
                     HexDigit HexDigit HexDigit HexDigit /
                  OctalDigit /
                  OctalDigit OctalDigit /
                  OctalDigit OctalDigit OctalDigit )
HexDigit <- [0-9a-fA-F]
OctalDigit <- [0-7]
NonQuoteChar <- [^']

StringLiteral <- RegularString / RawString
RegularString <- '"' ( EscapeSequence / [^"] )* '"'
EscapeSequence <- "\\" [btnvfr"\\]
RawString <- 'r"' [^"]* '"'

FunctionLiteral <- "fn" _ "(" _ Params? _ ")" _ BlockExpr

EnumLiteral <- Identifier _ "." _ Identifier

TupleLiteral <- "<" _ Exprs? _ ">"
Exprs <- Expr (_ "," _ Expr)*

ListLiteral <- "[" _ Exprs? _ "]" /
               "[" Expr _ ".." _ Expr "]" /
               "[" _ IndexValues _ "]"
IndexValues <- IndexValue (_ "," _ IndexValue)*
IndexValue <- DecimalIntegral _ "=" _ Expr

MapLiteral <- "[:]" / "[" _ KeyValues? _ "]"
KeyValues <- KeyValue (_ "," _ KeyValue)*
KeyValue <- (Literal / Identifier) _ ":" _ Expr

#
# Match expression
#

MatchExpr <- MatchLiteral / UnboundedName / BoundName
MatchExprs <- MatchExpr (_ "," _ MatchExpr)*

MatchLiteral <- MatchBaseLiteral / MatchCompositeLiteral

MatchBaseLiteral <- BooleanLiteral /
                    NumberLiteral /
                    CharacterLiteral /
                    StringLiteral /
                    EnumLiteral

MatchCompositeLiteral <- MatchTupleLiteral /
                         (BoundName _)? MatchListLiteral /
                         (BoundName _)? MatchMapLiteral

MatchListLiteral <- "[" _ MatchExprs? _ "]"

MatchTupleLiteral <- "<" _ MatchExprs? _ ">"

MatchMapLiteral <- "[:]" / "[" _ MatchKeyValues? _ "]"
MatchKeyValues <- MatchKeyValue (_ "," _ MatchKeyValue)*
MatchKeyValue <- (MatchLiteral / Identifier) _ ":" _ MatchExpr

#
# Class definition
#

ClassDef <- "class" __ Identifier _ ( ":" _ Interfaces _)?
                   "{" _ ClassMembers _ "}"
Interfaces <- Identifier (_ "," _ Identifier)*
ClassMembers <- ClassMember (_ ClassMember / ClassMemberError)*
ClassMember <- Constructor / Deconstructor / MemberMethod / MemberProperty
Constructor <- "this" _ "(" _ Params? _ ")" _ BlockExpr
Deconstructor <- "~this" _ "(" _ Params? _ ")" _ BlockExpr
MemberMethod <- MemberAccess _ FunctionDef
MemberAccess <- "public" / "private"
MemberProperty <- (MemberAccess (_ "const")? / "readonly") _ Identifier
                  (_ "=" _ Expr)?
ClassMemberError <- ("," / ";") {
    panic("Unexpected %s between members on line %d", $0, auxil->row);
}

#
# Interface definition
#

InterfaceDef <- "interface" __ Identifier _ "{" _ InterfaceMembers _ "}"
InterfaceMembers <- InterfaceMember (_ InterfaceMember / InterfaceMemberError)*
InterfaceMember <- InterfaceMemberMethod / InterfaceMemberProperty
InterfaceMemberMethod <- MemberAccess _ InterfaceMethod
InterfaceMethod <- "fn" _ Identifier _ "(" _ Params? _ ")"
InterfaceMemberProperty <- (MemberAccess (_ "const")? / "readonly") _ Identifier
InterfaceMemberError <- ("," / ";") {
    panic("Unexpected %s between members on line %d", $0, auxil->row);
}

#
# Enumeration definition
#

EnumDef <- "enum" __ ed:EnumDefName _ "{" _ e:Enums _ "}" {
    $$ = CCN(ENUM_DEF, 2, ed, e);
}
EnumDefName <- Identifier {
    $$ = CT(ENUM_DEF_NAME, $0);
}
Enums <- e:Enum { AN(ENUMS, e); } (__ e:Enum { AN(ENUMS, e); } / EnumValueError)* {
    $$ = CSN(ENUMS);
}
Enum <- en:EnumName (_ "=" _ e:Expr)? {
    $$ = CCN(ENUM, 2, en, e);
}
EnumName <- Identifier {
    $$ = CT(ENUM_NAME, $0);
}
EnumValueError <- ("," / ";") {
    panic("Unexpected %s between enum values on line %d", $0, auxil->row);
}

#
# Function definition
#

FunctionDef <- ("export" _)?
               "fn" __ f:FunctionName _ "(" _ p:Params? _ ")" _ b:BlockExpr {
    $$ = CCN(FUNCTION_DEF, 3, f, p, b);
}
FunctionName <- Identifier {
    $$ = CT(FUNCTION_NAME, $0);
}
Params <- n:NonDefaultParams _ "," _ d:DefaultParams { $$ = CCN(PARAMS, 2, n, d); } /
          n:NonDefaultParams { $$ = n; } /
          d:DefaultParams { $$ = d; }
NonDefaultParams <- n:NonDefaultParam { AN(NON_DEFAULT_PARAMS, n); }
                    (_ "," _ n:NonDefaultParam { AN(NON_DEFAULT_PARAMS, n); })* {
    $$ = CSN(NON_DEFAULT_PARAMS);
}
NonDefaultParam <- Identifier !(_ "=") {
    $$ = CT(NON_DEFAULT_PARAM, $0);
}
DefaultParams <- d:DefaultParam { AN(DEFAULT_PARAMS, d); } (_ "," _ d:DefaultParam {AN(DEFAULT_PARAMS, d); })* {
    $$ = CSN(DEFAULT_PARAMS);
}
DefaultParam <- i:DefaultParamName _ "=" _ e:Expr {
    $$ = CCN(DEFAULT_PARAM, 2, i, CT(EXPR, "expr"));
}
DefaultParamName <- Identifier {
    $$ = CT(DEFAULT_PARAM_NAME, $0);
}

BlockExpr <- "{" _ BlockLevelExprs _ "}"
BlockLevelExprs <- BlockLevelExpr (_ Comma _ BlockLevelExpr)*
BlockLevelExpr <- FunctionDef / Expr
Comma <- "," / ";" {
    panic("Unexpected ';' on line %d (use ',' as a separator between expressions)",
          auxil->row);
}

Args <- PositionalArgs / NamedArgs
PositionalArgs <- !NamedArg Expr (_ "," _ Expr)*
NamedArgs <- NamedArg (_ "," _ NamedArg)*
NamedArg <- Identifier _ ":" _ Expr

#
# Misc
#

Identifier <- [a-zA-Z_][a-zA-Z_0-9_]* {
    $$ = CT(IDENTIFIER, $0);
}
#_ <- WS*
#__ <- WS+
_ <- (WS / Comments)*
__ <- (WS / Comments)+
WS <- [ \t\r\n] {
    if (strcmp($0, "\n") == 0) {
        auxil->row++;
    }
}
Comments <- SingleLineComment / BlockComment
SingleLineComment <- "//" (!EOL .)* EOL?
EOL <- "\r\n" / "\n" / "\r" {
    auxil->row++;
}
BlockComment <- "/*" (BlockCommentContent / EOL)* "*/"
BlockCommentContent <- (!("*/" / EOL) .)
EOF <- _ !.

%%
int main() {
    satie_auxil_t* satie_auxil = satie_auxil_new();
    satie_context_t *context = satie_create(satie_auxil);
    ast_node_t* program;
    satie_parse(context, &program);
    print_ast(program, 0);
    satie_destroy(context);
    return 0;
}
