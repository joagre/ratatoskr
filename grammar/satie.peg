%prefix "satie"

%earlysource {
    static const char *dbg_str[] = { "Evaluating rule", "Matched rule", "Abandoning rule" };
    #define PCC_DEBUG(auxil, event, rule, level, pos, buffer, length) \
        fprintf(stderr, "%*s%s %s @%zu [%.*s]\n", (int)((level) * 2), "", dbg_str[event], rule, pos, (int)(length), buffer)
}

Program            <- _ Import* _ StructEnum* _ MainFunctionDef _ StructEnum* EOF

StructEnum         <- (Struct / Enum)
Import             <- "FIXME"
Struct             <- "FIXME"
Enum               <- "FIXME"

MainFunctionDef    <- "fn" _ "main" _ "(" _ Variable? _ ")" _ Block
Block              <- "{" _ BlockSequence _ "}"
BlockSequence      <- (Assignment /
                       MatchOperation /
                       FunctionDef /
                       Expr) (_ "," _ BlockSequence)*

Assignment         <- Variable _ "=" _ Expr

MatchOperation     <- "FIXME"

FunctionDef        <- "fn" _ FunctionName _ "(" _ Params? _ ")" _ Block
FunctionName       <- Identifier
Params             <- NonDefaultParams _ "," _ DefaultParams /
                      NonDefaultParams /
                      DefaultParams
NonDefaultParams   <- NonDefaultParam (_ "," _ NonDefaultParam)*
NonDefaultParam    <- Variable !(_ "=")
DefaultParams      <- DefaultParam (_ "," _ DefaultParam)*
DefaultParam       <- Variable _ "=" _ Expr

Expr               <- Or

Or                 <- And (_ "||" _ And)*
And                <- Add (_ "&&" _ Add)*
Add                <- Multiplicate (_ ("+" / "-") _ Multiplicate)*
Multiplicate       <- Not (_ ("*" / "/") _  Not)*
Not                <- "!" _ Unary / Unary
Unary              <- ("+" / "-")? Primary
Primary            <- Boolean / Number / String / Character / If / Switch /
                      Match / Receive / Block / Tuple / Array / Table /
                      AnonFunctionDef / FunctionCall / UnboundVariable / Variable /
                      ParanthesizedExpr

Boolean            <- "true" / "false"

Number             <- FloatingPoint / Integral
FloatingPoint      <- [0-9]* "." [0-9]+ ExponentPart? / [0-9]+ ExponentPart
ExponentPart       <- [eE] [+-]? [0-9]+
Integral           <- OctalIntegral / HexIntegral / BinaryIntegral / BigIntegral /
                      DecimalIntegral
OctalIntegral      <- "0"[0-7]+
HexIntegral        <- "0x"[0-9a-fA-F]+
BinaryIntegral     <- "0b"[01]+
BigIntegral        <- [0-9]+"b"
DecimalIntegral    <- [0-9]+

String             <- RegularString / RawString
RegularString      <- '"' ( EscapeSequence / [^"] )* '"'
EscapeSequence     <- "\\" [btnvfr"\\]
RawString          <- 'r"' [^"]* '"'

Character          <- "'" ( Escape / NonQuoteChar ) "'"
Escape             <- "\\" ( [abfnrtv'"\\] /
                      "x" HexDigit HexDigit /
                      "u" HexDigit HexDigit HexDigit HexDigit /
                      "U" HexDigit HexDigit HexDigit HexDigit
                          HexDigit HexDigit HexDigit HexDigit /
                      OctalDigit /
                      OctalDigit OctalDigit /
                      OctalDigit OctalDigit OctalDigit )
HexDigit           <- [0-9a-fA-F]
OctalDigit         <- [0-7]
NonQuoteChar       <- [^']

If                 <- "if" __ Expr _ Block
                      (_ "elseif" __ Expr _ Block)*
                      (_ "else" _ Block)?

Switch             <- "switch" __ Expr _ "{"
                      (_ "case" _ Expr _ Block)+
                      (_ "default" _ Block)?
                      _ "}"

Match              <- "match" __ Expr _ "{"
                      (_ "case" __ Expr _ Block)+
                      _ "}"

Receive            <- "FIXME"

Tuple              <- "#(" _ ExprList? _ ")"
ExprList           <- Expr (_ "," _ Expr)*

Array              <- "[" _ ExprList? _ "]" / "[" Expr _ ".." _ Expr "]"

Table              <- "[" _ (KeyValues / ":") _ "]"
KeyValues          <- KeyValue (_ "," _ KeyValues)*
KeyValue           <- Key _ ":" _ Value
Key                <- Expr
Value              <- Expr

AnonFunctionDef    <- "fn" _ "(" _ Params _ ")" _ Block

FunctionCall       <- FunctionName _ "(" _ Arguments? _ ")"
Arguments          <- Expr _ ("," _ Expr)*

ParanthesizedExpr  <- "(" _ Expr _ ")"

Variable           <- Identifier
Identifier         <- [a-zA-Z_][a-zA-Z_0-9_]*
UnboundVariable    <- "?" Variable
_                  <- (WS / Comments)*
__                 <- WS / Comments
WS                 <- [ \t\r\n]+
Comments           <- SingleLineComment / BlockComment
SingleLineComment  <- "//" (!EOL .)* EOL?
EOL                <- "\r\n" / "\n" / "\r"
BlockComment       <- "/*" (!"*/" .)* "*/"
EOF                <- _ !.

%%
int main() {
    satie_context_t *context = satie_create(NULL);
    satie_parse(context, NULL);
    satie_destroy(context);
    return 0;
}
