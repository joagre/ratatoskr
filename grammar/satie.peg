%prefix "satie"

%header {
    #include <stdarg.h>
    #include "satie_auxil.h"
    /*
    static const char *dbg_str[] = { "Evaluating rule", "Matched rule", "Abandoning rule" };
    #define PCC_DEBUG(auxil, event, rule, level, pos, buffer, length) \
    if (strcmp(rule, "WS") != 0 && strcmp(rule, "_") != 0 && strcmp(rule, "__") != 0) \
        fprintf(stderr, "%*s%s %s @%zu [%.*s]\n", (int)((level) * 2), "", dbg_str[event], \
                rule, pos, (int)(length), buffer)
    */
}

%auxil "satie_auxil_t*"
%value "ast_node_t*"

%source {
#define PCC_GETCHAR(auxil) satie_getchar(auxil)
#define PCC_ERROR(auxil) satie_error(auxil)
}

#
# Top level structure
#

Program <- _ (i:Imports __)? t:TopLevelDefs EOF {
    $$ = CCN(PROGRAM, 2, i, t);
}
TopLevelDefs <- t:TopLevelDef { AN(TOP_LEVEL_DEFS, t); } (__ t:TopLevelDef { AN(TOP_LEVEL_DEFS, t); } / TopLevelDefError)* {
    $$ = CSN(TOP_LEVEL_DEFS);
}
TopLevelDef <- (t:ClassDef / t:InterfaceDef / t:EnumDef / t:FunctionDef) {
    $$ = t;
}
TopLevelDefError <- ("," / ";") {
    panic("Unexpected %s between top level definitions on line %d",
          $0, auxil->row);
}

#
# Import
#

Imports <- i:Import { AN(IMPORTS, i); } (__ i:Import { AN(IMPORTS, i); })* {
    $$ = CSN(IMPORTS);
}
Import <- "import" __ (a:Alias _ "=" _)? _ m:Module (_ ":" _ i:ImportedNames)? {
    $$ = CCN(IMPORT, 3, a, m, i);
}
Alias <- Identifier {
    $$ = CT(ALIAS, $0);
}
Module <- m:ModuleComponent {AN(MODULE, m); } ( "." m:ModuleComponent { AN(MODULE, m); })* {
    $$ = CSN(MODULE);
}
ModuleComponent <- Identifier {
    AT(MODULE_COMPONENT, $0);
}
ImportedNames <- m:ImportedName { AN(IMPORTED_NAMES, m); } (_ "," _ m:ImportedName { AN(IMPORTED_NAMES, m); })* {
    $$ = CSN(IMPORTED_NAMES);
}
ImportedName <- Identifier {
    AT(IMPORTED_NAME, $0);
}

#
# Expression
#

Expr <- e:BindExpr { $$ = e; }
BindExpr <- m:MatchExpr _ ":=" _ e:Expr { $$ = CCN(BIND, 2, m, e); } / e:LogicalOrExpr { $$ = e; }
LogicalOrExpr <- l:LogicalOrExpr _ "||" _ e:LogicalAndExpr { $$ = CCN(OR, 2, l, e); } / e:LogicalAndExpr { $$ = e; }
LogicalAndExpr <- l:LogicalAndExpr _ "&&" _ e:BitwiseAndExpr { $$ = CCN(AND, 2, l, e); } / e:BitwiseAndExpr { $$ = e; }
BitwiseAndExpr <- l:BitwiseAndExpr _ "&" _ e:BitwiseXorExpr { $$ = CCN(BITWISE_AND, 2, l, e); } / e:BitwiseXorExpr { $$ = e; }
BitwiseXorExpr <- l:BitwiseXorExpr _ "^" _ e:BitwiseOrExpr { $$ = CCN(BITWISE_XOR, 2, l, e); } / e:BitwiseOrExpr { $$ = e; }
BitwiseOrExpr <- l:BitwiseOrExpr _ "|" _ e:GreaterThanEqualExpr { $$ = CCN(BITWISE_OR, 2, l, e); } /
                 e:GreaterThanEqualExpr { $$ = e; }
GreaterThanEqualExpr <- l:GreaterThanEqualExpr _ "gte" _ e:GreaterThanExpr { $$ = CCN(GTE, 2, l, e); } /
                        e:GreaterThanExpr { $$ = e; }
GreaterThanExpr <- l:GreaterThanExpr _ "gt" _ e:LessThanEqualExpr { $$ = CCN(GT, 2, l, e); } /
                   e:LessThanEqualExpr { $$ = e; }
LessThanEqualExpr <- l:LessThanEqualExpr _ "lte" _ e:LessThanExpr { $$ = CCN(LTE, 2, l, e); } / e:LessThanExpr { $$ = e; }
LessThanExpr <- l:LessThanExpr _ "lt" _ e:NotEqualExpr { $$ = CCN(LT, 2, l, e); } / e:NotEqualExpr { $$ = e; }
NotEqualExpr <- l:NotEqualExpr _ "!=" _ e:EqualExpr { $$ = CCN(NE, 2, l, e); } / e:EqualExpr { $$ = e; }
EqualExpr <- l:EqualExpr _ "==" _ e:InExpr { $$ = CCN(EQ, 2, l, e); } / e:InExpr { $$ = e; }
InExpr <- l:InExpr _ "in" _ e:RightShiftExpr { $$ = CCN(IN, 2, l, e); } / e:RightShiftExpr { $$ = e; }
RightShiftExpr <- l:RightShiftExpr _ "bsr" _ e:LeftShiftExpr { $$ = CCN(BSR, 2, l, e); } / e:LeftShiftExpr { $$ = e; }
LeftShiftExpr <- l:LeftShiftExpr _ "bsl" _ e:ConcatExpr { $$ = CCN(BSL, 2, l, e); } / e:ConcatExpr { $$ = e; }
ConcatExpr <- l:ConcatExpr _ "~" _ e:MinusExpr { $$ = CCN(CONCAT, 2, l, e); } / e:MinusExpr { $$ = e; }
MinusExpr <- l:MinusExpr _ "-" _ e:PlusExpr { $$ = CCN(MINUS, 2, l, e); } / e:PlusExpr { $$ = e; }
PlusExpr <- l:PlusExpr _ "+" _ e:ModulusExpr { $$ = CCN(PLUS, 2, l, e); } / e:ModulusExpr { $$ = e; }
ModulusExpr <- l:ModulusExpr _ "%" _ e:DivideExpr { $$ = CCN(MODULUS, 2, l, e); } / e:DivideExpr { $$ = e; }
DivideExpr <- l:DivideExpr _ "/" _ e:MultiplicateExpr { $$ = CCN(DIVIDE, 2, l, e); } / e:MultiplicateExpr { $$ = e; }
MultiplicateExpr <- l:MultiplicateExpr _ "*" _ e:ExponentiationExpr { $$ = CCN(MULTIPLY, 2, l, e); } /
                    e:ExponentiationExpr { $$ = e; }
ExponentiationExpr <- l:ExponentiationExpr _ "^^" _ e:CastExpr { $$ = CCN(EXPONENTIATE, 2, l, e); } / e:CastExpr { $$ = e; }
CastExpr <- "cast" _ "(" _ t:Type _ ")" _ e:BitwiseComplementExpr { $$ = CCN(CAST, 2, t, e); } /
            e:BitwiseComplementExpr { $$ = e; }
BitwiseComplementExpr <- "~" _ e:NotExpr { $$ = CCN(BITWISE_COMPLEMENT, 1, e); } / e:NotExpr { $$ = e; }
NotExpr <- "!" _ e:UnaryPlusExpr { $$ = CCN(NOT, 1, e); } / e:UnaryPlusExpr { $$ = e; }
UnaryPlusExpr <- "+" _ e:UnaryMinusExpr { $$ = CCN(UNARY_PLUS, 1, e); } / e:UnaryMinusExpr { $$ = e; }
UnaryMinusExpr <- "-" _ e:PostfixExpr { $$ = CCN(UNARY_MINUS, 1, e); } / e:PostfixExpr { $$ = e; }
# FIXME: This is obviously overly accepting, but it's a start
PostfixExpr <- (p:PrimaryExpr { AN(POSTFIX_EXPR, p); }
                (_ "." _ b:BoundName { AN(POSTFIX_EXPR, RN(b, DOT_NAME)); } /
                 _ "[" _ s:Expr _ ".." _ e:Expr _ "]" { AN(POSTFIX_EXPR, CCN(LIST_SLICE, 2, s, e)); } /
                 _ "[" _ i:IndexValues _ "]" { AN(POSTFIX_EXPR, RN(i, LIST_UPDATE)); } /
                 _ "[" _ m:MapKeyValues _ "]" { AN(POSTFIX_EXPR, RN(m, MAP_UPDATE)); } /
                 _ "[" _ e:Expr _ "]" { AN(POSTFIX_EXPR, RN(e, LIST_LOOKUP)); } /
                 _ "(" _ a:Args? _ ")" { AN(POSTFIX_EXPR, RN(a, FUNCTION_CALL)); })*) {
    $$ = CSN(POSTFIX_EXPR);
}

Type <- "int" { $$ = CT(INT_TYPE, NULL); } / "float" { $$ = CT(FLOAT_TYPE, NULL); }

IndexValues <- i:IndexValue { AN(INDEX_VALUES, i); } (_ "," _ i:IndexValue { AN(INDEX_VALUES, i); })* {
    $$ = CSN(INDEX_VALUES);
}
IndexValue <- d:DecimalIntegral _ "=" _ e:Expr {
    $$ = CCN(INDEX_VALUE, 2, d, e);
}

PrimaryExpr <- "nil" { $$ = CT(NIL, NULL); } /
               "this" { $$ = CT(THIS, NULL); } /
               "self" { $$ = CT(SELF, NULL); } /
               "$" { $$ = CT(SLICE_LENGTH, NULL); } /
               e:ControlFlowExpr { $$ = e; } /
               e:NewExpr { $$ = e; } /
               e:Literal { $$ = e; } /
               e:BoundName { $$ = e; } /
               "(" _ e:Expr _ ")" { $$ = e; }

ControlFlowExpr <- (c:IfExpr / c:SwitchExpr / c:ReceiveExpr / c:BlockExpr) {
    $$ = c;
}

IfExpr <- "if" __ e:Expr _ b:BlockExpr { AN(IF_EXPR, CCN(IF, 2, e, b)); }
          (_ "elif" __ e:Expr _ b:BlockExpr { AN(IF_EXPR, CCN(ELIF, 2, e, b)); })*
          (_ "else" _ e:BlockExpr { AN(IF_EXPR, CCN(ELSE, 1, e)); })? {
    $$ = CSN(IF_EXPR);
}

SwitchExpr <- "switch" __ e:Expr { AN(SWITCH_EXPR, CCN(SWITCH, 1, e)); } _ "{"
              (_ "case" __ m:MatchExprs _ ":" _ b:BlockLevelExprs { AN(SWITCH_EXPR, CCN(CASE, 2, m, b)); })+
              (_ "default" _ ":" _ b:BlockLevelExprs { AN(SWITCH_EXPR, CCN(DEFAULT, 1, b)); })? _
              "}" {
    $$ = CSN(SWITCH_EXPR);
}

ReceiveExpr <- "receive" __ c:Channels { AN(RECEIVE_EXPR, CCN(RECEIVE, 1, c)); } (_ "{"
               (_ "case" __ m:MatchExprs _ ":" _ b:BlockLevelExprs _ { AN(RECEIVE_EXPR, CCN(CASE, 2, m, b)); })+
               (_ "timeout" _ ":" _ d:DecimalIntegral _ b:BlockLevelExpr { AN(RECEIVE_EXPR, CCN(TIMEOUT, 2, d, b)); })? _
               "}")? {
    $$ = CSN(RECEIVE_EXPR);
}

Channels <- (d:Dereference / "[" _ d:Dereferences _ "]") {
    $$ = d;
}
Dereference <- (Identifier { $$ = CT(DEREFERENCE, $0); }
                (_ "." _ n:Name { AN(DEREFERENCE, RN(n, DOT_NAME)); } /
                 _ "[" _ e:Expr _ "]" { AN(DEREFERENCE, RN(e, LIST_LOOKUP)); })*) {
    $$ = CSN(DEREFERENCE);
}
Dereferences <- d:Dereference { AN(DEREFERENCES, d); } (_ "," _ d:Dereference { AN(DEREFERENCES, d); })* {
    $$ = CSN(DEREFERENCES);
}

NewExpr <- "new" _ i:Identifier _ "(" _ a:Args? _ ")" {
    $$ = CCN(NEW_EXPR, 2, i, a);
}

#
# Literal
#

Literal <- (l:BaseLiteral / l:CompositeLiteral) {
    $$ = l;
}

BaseLiteral <- (b:BooleanLiteral / b:NumberLiteral / b:CharacterLiteral /
                b:StringLiteral / b:FunctionLiteral / b:EnumLiteral) {
    $$ = b;
}

CompositeLiteral <- (c:TupleLiteral / c:ListLiteral / c:MapLiteral) {
    $$ = c;
}

BooleanLiteral <- "true" { $$ = CT(TRUE, NULL); } /
                  "false" { $$ = CT(FALSE, NULL); }

NumberLiteral <- (n:FloatingPoint / n:Integral) {
    $$ = n;
}

FloatingPoint <- (f:DecimalPointLeading / f:DecimalPointTrailing) {
    $$ = CT(FLOATING_POINT, $0);
}
DecimalPointLeading <- [0-9]* "." [0-9]+ ExponentPart?
DecimalPointTrailing <- [0-9]+ ExponentPart
ExponentPart <- [eE] [+-]? [0-9]+

Integral <- (HexIntegral / BinaryIntegral / OctalIntegral / DecimalIntegral) {
    $$ = CT(INTEGRAL, $0);
}
HexIntegral <- "0x" [0-9a-fA-F]+
BinaryIntegral <- "0b" [01]+
OctalIntegral <- "0" [0-7]+
DecimalIntegral <- [0-9]+

CharacterLiteral <- "'" ( c:EscapeCharacter / c:NonQuoteCharacter ) "'" {
    $$ = CCN(CHARACTER_LITERAL, 1, c);
}
EscapeCharacter <- "\\" ( [abfnrtv'"\\] /
                   "x" HexDigit HexDigit /
                   "u" HexDigit HexDigit HexDigit HexDigit /
                   "U" HexDigit HexDigit HexDigit HexDigit
                       HexDigit HexDigit HexDigit HexDigit /
                    OctalDigit /
                    OctalDigit OctalDigit /
                    OctalDigit OctalDigit OctalDigit ) {
    $$ = CT(ESCAPE_CHARACTER, $0);
}
HexDigit <- [0-9a-fA-F]
OctalDigit <- [0-7]
NonQuoteCharacter <- [^'] {
    $$ = CT(NON_QUOTE_CHARACTER, $0);
}

StringLiteral <- '"' RegularString '"' / 'r"' RawString '"'
RegularString <- (EscapeSequence / [^"])* {
    $$ = CT(REGULAR_STRING, $0);
}
EscapeSequence <- "\\" [btnvfr"\\]
RawString <- [^"]* {
    $$ = CT(RAW_STRING, $0);
}

FunctionLiteral <- "fn" _ "(" _ p:Params? _ ")" _ e:BlockExpr {
    $$ = CCN(FUNCTION_LITERAL, 2, p, e);
}

EnumLiteral <- edn:EnumDefName _ "." _ en:EnumName {
    $$ = CCN(ENUM_LITERAL, 2, edn, en);
}

TupleLiteral <- "<" _ ">" { $$ = CT(TUPLE_LITERAL, NULL); } / "<" _ e:Exprs? _ ">" { $$ = RN(e, TUPLE_LITERAL); }
Exprs <- e:Expr { AN(EXPRS, e); } (_ "," _ e:Expr { AN(EXPRS, e); })* {
    $$ = CSN(EXPRS);
}

ListLiteral <- "[" _ "]" { $$ = CT(LIST_LITERAL, NULL); } / "[" _ e:Exprs? _ "]" { $$ = RN(e, LIST_LITERAL); }

MapLiteral <- "[:]" { $$ = CT(MAP_LITERAL, NULL); } / "[" _ k:MapKeyValues? _ "]" { $$ = CCN(MAP_LITERAL, 1, k); }
MapKeyValues <- m:MapKeyValue { AN(MAP_KEY_VALUES, m); } (_ "," _ m:MapKeyValue { AN(MAP_KEY_VALUES, m); })* {
    $$ = CSN(MAP_KEY_VALUES);
}
MapKeyValue <- (k:Literal / k:Identifier) _ ":" _ v:Expr {
    $$ = CCN(MAP_KEY_VALUE, 2, k, v);
}

#
# Match expression
#

MatchExpr <- (m:MatchLiteral / m:UnboundName / m:BoundName) { AN(MATCH_EXPR, m); } (_ "is" _ u:UnboundName { AN(MATCH_EXPR, RN(u, MATCH_IS)); })? {
    $$ = CSN(MATCH_EXPR);
}

MatchLiteral <- (m:MatchBaseLiteral / m:MatchCompositeLiteral) {
    $$ = m;
}

MatchBaseLiteral <- (m:BooleanLiteral /
                     m:NumberLiteral /
                     m:CharacterLiteral /
                     m:StringLiteral /
                     m:EnumLiteral) {
    $$ = m;
}

MatchCompositeLiteral <- (m:MatchTupleLiteral /
                          m:MatchListLiteral /
                          m:MatchMapLiteral) {
    $$ = m;
}

MatchTupleLiteral <- "<" _ ">" { $$ = CT(TUPLE_LITERAL, NULL); } / "<" _ m:MatchExprs? _ ">" { $$ = RN(m, TUPLE_LITERAL); }
MatchExprs <- m:MatchExpr { AN(MATCH_EXPRS, m); } (_ "," _ m:MatchExpr { AN(MATCH_EXPRS, m); })* {
    $$ = CSN(MATCH_EXPRS);
}

MatchListLiteral <- "[" _ "]" { $$ = CT(LIST_LITERAL, NULL); } /
                    BoundName "[" _ m:MatchExpr? _ "]" { $$ = RN(m, LIST_LOOKUP); } /
                    "[" _ m:MatchExprs? _ "]" { $$ = RN(m, LIST_LITERAL); }

MatchMapLiteral <- "[:]" { $$ = CT(MAP_LITERAL, NULL); } / "[" _ m:MatchMapKeyValues? _ "]" { $$ = CCN(MAP_LITERAL, 1, m); }
MatchMapKeyValues <- m:MatchMapKeyValue { AN(MAP_KEY_VALUES, m); } (_ "," _ m:MatchMapKeyValue { AN(MAP_KEY_VALUES, m); })* {
    $$ = CSN(MAP_KEY_VALUES);
}
MatchMapKeyValue <- (k:Literal / k:Identifier) _ ":" _ v:MatchExpr {
    $$ = CCN(MAP_KEY_VALUE, 2, k, v);
}

#
# Class definition
#

ClassDef <- "class" __ cn:ClassName _ ( ":" _ i:Interfaces _ )? "{" _
            c:ClassMembers _
            "}" {
    $$ = CCN(CLASS_DEF, 3, cn, i, c);
}
ClassName <- Identifier {
    $$ = CT(CLASS_NAME, $0);
}
Interfaces <- i:Interface { AN(INTERFACES, i); } (_ "," _ i:Interface { AN(INTERFACES, i); })* {
    $$ = CSN(INTERFACES);
}
Interface <- Identifier {
    $$ = CT(INTERFACE, $0);
}
ClassMembers <- c:ClassMember { AN(CLASS_MEMBERS, c); } (_ c:ClassMember { AN(CLASS_MEMBERS, c); } / ClassMemberError)* {
    $$ = CSN(CLASS_MEMBERS);
}
ClassMember <- (c:Constructor /
                c:Destructor /
                c:MemberMethod /
                c:MemberProperty) {
    $$ = c;
}
Constructor <- "this" _ "(" _ p:Params? _ ")" _ b:BlockExpr {
    $$ = CCN(CONSTRUCTOR, 2, p, b);
}
Destructor <- "~this" _ "(" _ p:Params? _ ")" _ b:BlockExpr {
    $$ = CCN(DESTRUCTOR, 2, p, b);
}
MemberMethod <- m:MemberAccess _ f:FunctionDef {
        $$ = CCN(MEMBER_METHOD, 2, m, f);
}
MemberAccess <- "public" { $$ = CT(PUBLIC, NULL); } / "private" { $$ = CT(PRIVATE, NULL); }
MemberProperty <- ((m:MemberAccess (_ c:Const)? / c:Readonly) _ n:Name (_ "=" _ e:Expr)?) {
        $$ = CCN(MEMBER_PROPERTY, 4, m, c, n, e);
}
ClassMemberError <- ("," / ";") {
    panic("Unexpected %s between members on line %d", $0, auxil->row);
}
Const <- "const" {
    $$ = CT(CONST, NULL);
}
Readonly <- "readonly" {
    $$ = CT(READONLY, NULL);
}

#
# Interface definition
#

InterfaceDef <- "interface" __ i:InterfaceName _ "{" _ im:InterfaceMembers _ "}" {
    $$ = CCN(INTERFACE_DEF, 2, i, im);
}
InterfaceName <- Identifier {
    $$ = CT(INTERFACE_NAME, $0);
}
InterfaceMembers <- i:InterfaceMember { AN(INTERFACE_MEMBERS, i); } (_ i:InterfaceMember { AN(INTERFACE_MEMBERS, i); } / InterfaceMemberError)* {
    $$ = CSN(INTERFACE_MEMBERS);
}
InterfaceMember <- (i:InterfaceMemberMethod / i:InterfaceMemberProperty) {
    $$ = i;
}
InterfaceMemberMethod <- m:MemberAccess _ i:InterfaceMethod {
    $$ = CCN(INTERFACE_MEMBER_METHOD, 2, m, i);
}
InterfaceMethod <- "fn" _ f:FunctionName _ "(" _ p:Params? _ ")" {
    $$ = CCN(INTERFACE_METHOD, 2, f, p);
}
InterfaceMemberProperty <- ((m:MemberAccess (_ c:Const)? / c:Readonly) _ n:Name) {
    $$ = CCN(INTERFACE_MEMBER_PROPERTY, 3, m, c, n);
}
InterfaceMemberError <- ("," / ";") {
    panic("Unexpected %s between members on line %d", $0, auxil->row);
}

#
# Enumeration definition
#

EnumDef <- "enum" __ ed:EnumDefName _ "{" _ e:Enums _ "}" {
    $$ = CCN(ENUM_DEF, 2, ed, e);
}
EnumDefName <- Identifier {
    $$ = CT(ENUM_DEF_NAME, $0);
}
Enums <- e:Enum { AN(ENUMS, e); } (__ e:Enum { AN(ENUMS, e); } / EnumValueError)* {
    $$ = CSN(ENUMS);
}
Enum <- en:EnumName (_ "=" _ e:Expr)? {
    $$ = CCN(ENUM, 2, en, e);
}
EnumName <- Identifier {
    $$ = CT(ENUM_NAME, $0);
}
EnumValueError <- ("," / ";") {
    panic("Unexpected %s between enum values on line %d", $0, auxil->row);
}

#
# Function definition
#

FunctionDef <- e:Export? _ "fn" __ f:FunctionName _ "(" _ p:Params? _ ")" _ b:BlockExpr {
    $$ = CCN(FUNCTION_DEF, 4, e, f, p, b);
}
Export <- "export" {
    $$ = CT(EXPORT, NULL);
}
FunctionName <- Identifier {
    $$ = CT(FUNCTION_NAME, $0);
}
Params <- n:NonDefaultParams _ "," _ d:DefaultParams { $$ = CCN(PARAMS, 2, n, d); } /
          n:NonDefaultParams { $$ = n; } /
          d:DefaultParams { $$ = d; }
NonDefaultParams <- n:NonDefaultParam { AN(NON_DEFAULT_PARAMS, n); }
                    (_ "," _ n:NonDefaultParam { AN(NON_DEFAULT_PARAMS, n); })* {
    $$ = CSN(NON_DEFAULT_PARAMS);
}
NonDefaultParam <- Identifier !(_ "=") {
    $$ = CT(NON_DEFAULT_PARAM, $0);
}
DefaultParams <- d:DefaultParam { AN(DEFAULT_PARAMS, d); } (_ "," _ d:DefaultParam {AN(DEFAULT_PARAMS, d); })* {
    $$ = CSN(DEFAULT_PARAMS);
}
DefaultParam <- i:DefaultParamName _ "=" _ e:Expr {
    $$ = CCN(DEFAULT_PARAM, 2, i, e);
}
DefaultParamName <- Identifier {
    $$ = CT(DEFAULT_PARAM_NAME, $0);
}

BlockExpr <- "{" _ b:BlockLevelExprs _ "}" {
    $$ = b;
}
BlockLevelExprs <- b:BlockLevelExpr { AN(BLOCK_EXPR, b); } (_ Comma _ b:BlockLevelExpr { AN(BLOCK_EXPR, b); })* {
    $$ = CSN(BLOCK_EXPR);
}
BlockLevelExpr <- (b:FunctionDef / b:Expr) {
    $$ = b;
}
Comma <- "," / ";" {
    panic("Unexpected ';' on line %d (use ',' as a separator between "
          "expressions)", auxil->row);
}

Args <- (a:PositionalArgs / a:NamedArgs) {
    $$ = a;
}
PositionalArgs <- !NamedArg e:Expr { AN(POSITIONAL_ARGS, e); } (_ "," _ e:Expr { AN(POSITIONAL_ARGS, e); })*
NamedArgs <- n:NamedArg { AN(NAMED_ARGS, n); } (_ "," _ NamedArg { AN(NAMED_ARGS, n); })* {
    $$ = CSN(NAMED_ARGS);
}
NamedArg <- i:Identifier _ ":" _ r:Expr {
    $$ = CCN(NAMED_ARG, 2, i, r);
}

#
# Misc
#

Identifier <- [a-zA-Z_][a-zA-Z_0-9_]*

Name <- Identifier {
    $$ = CT(NAME, $0);
}
BoundName <- n:Name {
    $$ = RN(n, BOUND_NAME);
}
UnboundName <- "?" _ n:Name {
    $$ = RN(n, UNBOUND_NAME);
}

#_ <- WS*
#__ <- WS+
_ <- (WS / Comments)*
__ <- (WS / Comments)+
WS <- [ \t\r\n] {
    if (strcmp($0, "\n") == 0) {
        auxil->row++;
    }
}
Comments <- SingleLineComment / BlockComment
SingleLineComment <- "//" (!EOL .)* EOL?
EOL <- "\r\n" / "\n" / "\r" {
    auxil->row++;
}
BlockComment <- "/*" (BlockCommentContent / EOL)* "*/"
BlockCommentContent <- (!("*/" / EOL) .)

EOF <- _ !.

%%
int main() {
    satie_auxil_t* satie_auxil = satie_auxil_new();
    satie_context_t *context = satie_create(satie_auxil);
    ast_node_t* program;
    satie_parse(context, &program);
    print_ast(program, 0);
    satie_destroy(context);
    return 0;
}
