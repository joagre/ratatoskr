%prefix "satie"

%earlysource {
    static const char *dbg_str[] = { "Evaluating rule", "Matched rule", "Abandoning rule" };
    #define PCC_DEBUG(auxil, event, rule, level, pos, buffer, length) \
        fprintf(stderr, "%*s%s %s @%zu [%.*s]\n", (int)((level) * 2), "", dbg_str[event], rule, pos, (int)(length), buffer)
}

#
# Top level structure
#

Program           <- _ (Imports __)? TopLevelDefs EOF
TopLevelDefs      <- TopLevelDef (__ TopLevelDef)*
TopLevelDef       <- StructDef / InterfaceDef / EnumDef / FunctionDef

Imports           <- Import (__ Import)*
Import            <- "import" __ (ModuleAlias _ "=" _)? _ ModulePath
ModuleAlias       <- Identifier
ModulePath        <- Identifier ("." Identifier)* (_ ":" _ ImportedEntities)?
ImportedEntities  <- Identifier (_ "," Identifier)*

#
# Expression
#

Expr                   <- AssignExpr
AssignExpr              <- LogicalOrExpr (_ "=" _ LogicalOrExpr)*
LogicalOrExpr           <- LogicalAndExpr (_ "||" _ LogicalAndExpr)*
LogicalAndExpr          <- BitwiseAndExpr (_ "&&" _ BitwiseAndExpr)*
BitwiseAndExpr          <- BitwiseXorExpr (_ "&" _ BitwiseXorExpr)*
BitwiseXorExpr          <- BitwiseOrExpr (_ "^" _ BitwiseOrExpr)*
BitwiseOrExpr           <- LargerThanEqualExpr (_ "|" _ LargerThanEqualExpr)*
LargerThanEqualExpr     <- LargerThanExpr (_ ">=" _ LargerThanExpr)*
LargerThanExpr          <- LessThanEqualExpr (_ ">" _ LessThanEqualExpr)*
LessThanEqualExpr       <- LessThanExpr (_ "<=" _ LessThanExpr)*
LessThanExpr            <- IsNotExpr (_ "<" _ IsNotExpr)*
IsNotExpr               <- IsExpr (_ "!is" _ IsExpr)*
IsExpr                  <- NotEqualExpr (_ "is" _ NotEqualExpr)*
NotEqualExpr            <- EqualExpr (_ "!=" _ EqualExpr)*
EqualExpr               <- InExpr (_ "==" _ InExpr)*
InExpr                  <- UnsignedRightShiftExpr
                           (_ "in" _ UnsignedRightShiftExpr)*
UnsignedRightShiftExpr  <- RightShiftExpr (_ ">>>" _ RightShiftExpr)*
RightShiftExpr          <- LeftShiftExpr (_ ">>" _ LeftShiftExpr)*
LeftShiftExpr           <- ConcatenateExpr (_ "<<" _ ConcatenateExpr)*
ConcatenateExpr         <- MinusExpr (_ "~" _ MinusExpr)*
MinusExpr               <- PlusExpr (_ "-" _ PlusExpr)*
PlusExpr                <- ModulusExpr (_ "+" _ ModulusExpr)*
ModulusExpr             <- DivideExpr (_ "%" _ DivideExpr)*
DivideExpr              <- MultiplicateExpr (_ "/" _ MultiplicateExpr)*
MultiplicateExpr        <- ExponentiationExpr (_ "*" _ ExponentiationExpr)*
ExponentiationExpr      <- CastExpr (_ "^^" _ CastExpr)*
CastExpr                <- "cast" _ "(" _ ("int" / "float") _ ")" _
                           BitwiseComplementExpr / BitwiseComplementExpr
BitwiseComplementExpr   <- "~" _ NotExpr / NotExpr
NotExpr                 <- "!" _ UnaryPlusExpr / UnaryPlusExpr
UnaryPlusExpr           <- "+" _ UnaryMinusExpr / UnaryMinusExpr
UnaryMinusExpr          <- "-" _ PostfixExpr / PostFixExpr
PostfixExpr             <- PrimaryExpr _ ("." _ (ControlFlowExpr / Identifier) /
                                          "(" _ Args? _ ")" /
                                          "[" _ Expr _ "]")*

Args                    <- PositionalArgs / NamedArgs
PositionalArgs          <- !NamedArg Expr (_ "," _ Expr)*
NamedArgs               <- NamedArg (_ "," _ NamedArg)*
NamedArg                <- Identifier _ ":" _ Expr

# Expr               <- AssignExpr
# AssignExpr         <- LogicalOrExpr (_ "=" _ AssignExpr)?
# LogicalOrExpr      <- LogicalAndExpr (_ "||" _ LogicalOrExpr)?
# LogicalAndExpr     <- (CompareExpr / OrExpr) (_ "&&" _ LogicalAndExpr)?
# OrExpr             <- XorExpr (_ "|" _ OrExpr)?
# XorExpr            <- AndExpr (_ "^" _ XorExpr)?
# AndExpr            <- ShiftExpr (_ "&" _ AndExpr)?
# CompareExpr        <- EqualExpr / IdentityExpr / RelativeExpr / InExpr / ShiftExpr
# EqualExpr          <- ShiftExpr _ ("==" / "!=") _ ShiftExpr
# IdentityExpr       <- ShiftExpr _ ("!is" / "is") _ ShiftExpr
# RelativeExpr       <- ShiftExpr _ ("<=" / ">=" / "<" / ">") _ ShiftExpr
# InExpr             <- ShiftExpr (_ ("!in" / "in") _ ShiftExpr)?
# ShiftExpr          <- AddExpr (_ (">>>" / ">>" / "<<") _ AddExpr)?
# AddExpr            <- (MultiplicateExpr /
#                        ConcatenateExpr) (_ ("+" / "-") _ MultiplicateExpr)?
# ConcatenateExpr    <- MultiplicateExpr (_ "~" _ AddExpr)?
# MultiplicateExpr   <- UnaryExpr (_ ("*" / "/" / "%") _ UnaryExpr)?
# UnaryExpr          <- ("+" / "-" / "!") _ UnaryExpr /
#                       ComplementExpr /
#                       NewExpr /
#                       CastExpr /
#                       PowerExpr
# ComplementExpr     <- "~" _ UnaryExpr
# NewExpr            <- "new" _ Identifier _ "(" _ Args _ ")"?
# CastExpr           <-  "cast" _ "(" _ ("int" / "float") _ ")" _ UnaryExpr
# PowerExpr          <- PostfixExpr (_ "^^" _ UnaryExpr)?
# PostfixExpr        <- PrimaryExpr _ (IndexExpr / SliceExpr)*
#                       ("." _ Identifier /
#                        "(" _ Args? _ ")")?
# IndexExpr          <- "[" _ Args _ "]"
# SliceExpr          <- "[" _ AssignExpr _ ".." _ AssignExpr _ "]"

PrimaryExpr             <- "this" /
                           "self" /
                           "$" /
                           Literal /
                           ControlFlowExpr /
                           NewStructExpr /
                           "?" _ Identifier /
                           Identifier /
                           "(" _ Expr _ ")"
Literal                 <- BooleanLiteral /
                           NumberLiteral /
                           CharacterLiteral /
                           StringLiteral /
                           FunctionLiteral /
                           TupleLiteral /
                           ListLiteral /
                           MapLiteral /
                           StructLiteral
BooleanLiteral          <- "true" / "false"

# FIXME: Add full set of operators below

# Expr               <- Or
# Or                 <- And (_ "||" _ And)*
# And                <- Equality (_ "&&" _ Equality)*
# Equality           <- Concatenate (_ "==" _ Concatenate)*
# Concatenate        <- Add (_ "~" _ Add)*
# Add                <- Multiplicate (_ "+" _  Multiplicate)*
# Multiplicate       <- Not (_ ("*" / "/") _  Not)*
# Not                <- "!" _ Unary / Unary
# Unary              <- ("+" / "-")? _ Indexing / Indexing
# Indexing           <- &(Identifier _ "[")
#                       Identifier _ "[" _ Expr _ "]"  / FunctionCall
# FunctionCall       <- &(Identifier _ "(")
#                       Identifier _ "(" _ ExprSequence? _ ")" / FieldAccess
# FieldAccess        <- &(HasField _ ".")
#                       HasField (_ "." _ HasField)* / ParenthesizedExpr
# ParenthesizedExpr  <- "(" _ Expr _ ")" / Primary

# HasField           <- Identifier !(_ ("(" / "[")) / Literal / Indexing /
#                       FunctionCall

# Primary            <- Literal / PrimaryExpr / UnboundVariable / Identifier

# Literal            <- FunctionLiteral / ListLiteral / StringLiteral /
#                       CharacterLiteral / NumberLiteral / BooleanLiteral /
#                       EmptyMapLiteral / SliceLiteral / TupleLiteral /
#                       MapLiteral / StructLiteral

# PrimaryExpr        <- NewStructExpr / IfExpr / SwitchExpr / MatchExpr /
#                       ReceiveExpr / BlockExpr / ThisExpr / SelfExpr

NumberLiteral           <- FloatingPoint / Integral
Integral                <- HexIntegral /
                           BinaryIntegral /
                           OctalIntegral /
                           DecimalIntegral
FloatingPoint           <- DecimalPointLeading / DecimalPointTrailing
DecimalPointLeading     <- [0-9]* "." [0-9]+ ExponentPart?
DecimalPointTrailing    <- [0-9]+ ExponentPart
ExponentPart            <- [eE] [+-]? [0-9]+
DecimalIntegral         <- [0-9]+
OctalIntegral           <- "0" [0-7]+
HexIntegral             <- "0x" [0-9a-fA-F]+
BinaryIntegral          <- "0b" [01]+

CharacterLiteral        <- "'" ( Escape / NonQuoteChar ) "'"
Escape                  <- "\\" ( [abfnrtv'"\\] /
                           "x" HexDigit HexDigit /
                           "u" HexDigit HexDigit HexDigit HexDigit /
                           "U" HexDigit HexDigit HexDigit HexDigit
                               HexDigit HexDigit HexDigit HexDigit /
                           OctalDigit /
                           OctalDigit OctalDigit /
                           OctalDigit OctalDigit OctalDigit )
HexDigit                <- [0-9a-fA-F]
OctalDigit              <- [0-7]
NonQuoteChar            <- [^']

StringLiteral           <- RegularString / RawString
RegularString           <- '"' ( EscapeSequence / [^"] )* '"'
EscapeSequence          <- "\\" [btnvfr"\\]
RawString               <- 'r"' [^"]* '"'

FunctionLiteral         <- "fn" _ "(" _ Params _ ")" _ BlockExpr

TupleLiteral            <- "#(" _ Exprs? _ ")"
Exprs                   <- Expr (_ "," _ Expr)*

ListLiteral             <- "[" _ Exprs? _ "]" / "[" Expr _ ".." _ Expr "]"

MapLiteral              <- "@[" _ KeyValues? _ "]"
KeyValues               <- KeyValue (_ "," _ KeyValue)*
KeyValue                <- Expr _ ":" _ Expr

StructLiteral           <- "&[" _ MemberValues _ "]"
MemberValues            <- MemberValue (_ "," _ MemberValue)*
MemberValue             <- Identifier _ "=" _ Expr

ControlFlowExpr         <- IfExpr / SwitchExpr / MatchExpr / ReceiveExpr

IfExpr                  <- "if" __ Expr _ BlockExpr
                           (_ "elif" __ Expr _ BlockExpr)*
                           (_ "else" _ BlockExpr)?

SwitchExpr              <- "switch" __ Expr _ "{"
                           (_ "case" _ Expr _ BlockExpr)+
                           (_ "default" _ BlockExpr)?
                           _ "}"

MatchExpr               <- "match" __ Expr _ "{"
                           (_ "case" __ Expr _ BlockExpr)+
                           _ "}"

ReceiveExpr             <- "receive" __ Expr _ "{"
                           (_ "case" _ Expr _ BlockExpr)+
                           (_ "timeout" _ DecimalIntegral _ BlockExpr)?
                           _ "}"

NewStructExpr           <- "new" _ Identifier (_ ("(" _ Args _ ")" /
                                                  "=" _ StructLiteral))?

Identifier              <- [a-zA-Z_][a-zA-Z_0-9_]*

#
# Struct definition
#

StructDef       <- ("singleton" __)? "struct" __ Identifier _
                   ( ":" _ Interfaces _)?
                   "{" _ StructMembers _ "}"
Interfaces      <- Identifier (_ "," _ Identifier)*
StructMembers   <- StructMember (_ StructMember)*
StructMember    <- Constructor /
                   Deconstructor /
                   MemberFunction /
                   MemberVariable
Constructor     <- "this" _ "(" _ Params? _ ")" _ BlockExpr
Deconstructor   <- "~this" _ "(" _ Params? _ ")" _ BlockExpr
MemberFunction  <- MemberAccess _ FunctionDef
MemberAccess    <- "public" / "private"
MemberVariable  <- (MemberAccess (_ "const")? / "readonly") _ Identifier
                   (_ "=" _ Expr)?

#
# Interface definition
#

InterfaceDef            <- "interface" __ Identifier _
                           "{" _ InterfaceMembers _ "}"
InterfaceMembers        <- InterfaceMember (_ InterfaceMember)*
InterfaceMember         <- InterfaceMemberFunction / InterfaceMemberVariable
InterfaceMemberFunction <- MemberAccess _ InterfaceFunction
InterfaceFunction       <- "fn" _ Identifier _ "(" _ Params? _ ")"
InterfaceMemberVariable <- (MemberAccess (_ "const")? / "readonly") _ Identifier

#
# Enumeration definition
#

EnumDef     <- "enum" __ Identifier _ "{" _ EnumValues _ "}"
EnumValues  <- EnumValue (__ EnumValue)*
EnumValue   <- Identifier (_ "=" _ Expr)?

#
# Function definition
#

FunctionDef       <- "fn" __ Identifier _ "(" _ Params? _ ")" _ BlockExpr
Params            <- NonDefaultParams _ "," _ DefaultParams /
                     NonDefaultParams /
                     DefaultParams
NonDefaultParams  <- NonDefaultParam (_ "," _ NonDefaultParam)*
NonDefaultParam   <- Identifier !(_ "=")
DefaultParams     <- DefaultParam (_ "," _ DefaultParam)*
DefaultParam      <- Identifier _ "=" _ Expr

BlockExpr         <- "{" _ BlockLevelExprs _ "}"
BlockLevelExprs   <- BlockLevelExpr (_ "," _ BlockLevelExpr)*
#TopLevelExpr     <- Binding / FunctionDef / Expr
BlockLevelExpr    <- FunctionDef / Expr

#
# Misc
#

#_                  <- WS*
#__                 <- WS+
_                  <- (WS / Comments)*
__                 <- (WS / Comments)+
WS                 <- [ \t\r\n]
Comments           <- SingleLineComment / BlockComment
SingleLineComment  <- "//" (!EOL .)* EOL?
EOL                <- "\r\n" / "\n" / "\r"
BlockComment       <- "/*" (!"*/" .)* "*/"
EOF                <- _ !.

%%
int main() {
    satie_context_t *context = satie_create(NULL);
    satie_parse(context, NULL);
    satie_destroy(context);
    return 0;
}
