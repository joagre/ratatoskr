import std.stdio : writeln

enum Color {
    red
    green
    blue
}

interface Iterator {
    public fn next()
    public fn hasNext()
}

struct ColorIterator : Iterator {
    private colors
    private graffiti

    this(colors) {
        this(colors: colors, graffiti: "Kilroy was here")
    }

    public fn next() {
        if (!hasNext()) {
            false
        } else {
            #(this(colors: colors.rest()), colors.first())
        }
    }

    public fn hasNext() {
        !colors.isEmpty()
    }
}

export fn main() {
    ?colors <- [Color.red, Color.red, Color.blue, Color.green],
    ?iterator <- struct ColorIterator(colors),
    fn iterate(iterator) {
        if (iterator.hasNext()) {
            #(?iterator, ?color) <- iterator.next(),
            writeln("Color: $color"),
            iterate(iterator)
        }
    },
    iterate(iterator)
}
