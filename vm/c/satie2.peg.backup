%prefix "satie"

%source {
static const char *dbg_str[] = { "Evaluating rule", "Matched rule", "Abandoning rule" };
#define PCC_DEBUG(auxil, event, rule, level, pos, buffer, length) \
    fprintf(stderr, "%*s%s %s @%zu [%.*s]\n", (int)((level) * 2), "", dbg_str[event], rule, pos, (int)(length), buffer)
}

Program            <- _ Import* _ StructEnum* _ MainFunction _ StructEnum* EOF

StructEnum         <- (Struct / Enum)
Import             <- "FIXME"
Struct             <- "FIXME"
Enum               <- "FIXME"

MainFunction       <- "fn" _ "main" _ "(" _ Variable? _ ")" _ Block
Block              <- "{" _ ExprSequence _ "}"
ExprSequence       <- Expr (_ "," _ Expr)*
#ExprSequence       <- (
#/ Expr
#) (_ "," _ ExprSequence)*
#ExprSequence       <- (Assignment / MatchOperation / Function / Expr) (_ "," _ ExprSequence)*

#MatchOperation     <- "FIXME"

# Function           <- "fn" _ FunctionName _ "(" _ Params? _ ")" _ Block
FunctionName         <- Identifier
# Params             <- NonDefaultParams _ "," _ DefaultParams /
#                       NonDefaultParams /
#                       DefaultParams
# NonDefaultParams   <- NonDefaultParam (_ "," _ NonDefaultParam)*
# NonDefaultParam    <- Variable !(_ "=")
# DefaultParams      <- DefaultParam (_ "," _ DefaultParam)*
# DefaultParam       <- Variable _ "=" _ Expr

Expr               <- Assignment /
                      LogicalOr /
                      #MatchOperation /
                      #Function
                      #If /
                      #Switch /
                      #Match /
                      #Tuple /
                      #Array /
                      #Table /
                      #Variable /
                      #UnboundVariable /
                      #AnonymousFunction /
                      Primary

LogicalOr          <- LogicalAnd (_ "||" _ LogicalAnd)*
Assignment         <- Variable _ "=" _ LogicalOr
LogicalAnd         <- BitwiseOr (_ "&&" _ BitwiseOr)*
BitwiseOr          <- BitwiseXor (_ "|" _ BitwiseXor)*
BitwiseXor         <- BitwiseAnd (_ "^" _ BitwiseAnd)*
BitwiseAnd         <- Equality (_ "&" _ Equality)*
Equality           <- Relational (_ ("==" / "!=" / "is" / "!is") _ Relational)*
Relational         <- Shift (_ ("<" / "<=" / ">" / ">=") _ Shift)*
Shift              <- _ Addition (_ ("<<" / ">>" / ">>>") _ Addition _)*
Addition           <- _ Multiplication _ (_ (_ "+" _ / "-" / "~") _ Multiplication _)*
Multiplication     <- Unary (_ ("*" / "/" / "%") _ Unary)*
Unary              <- ("+" / "-" / "!") _ Primary / Primary

# If                 <- "if" __ Expr _ Block
#                       (_ "elseif" __ Expr _ Block)*
#                       (_ "else" _ Block)?

# Switch             <- "switch" __ Expr _ "{"
#                       (_ "case" _ Expr _ Block)+
#                       (_ "default" _ Block)?
#                       _ "}"

# Match              <- "match" __ Expr _ "{"
#                       (_ "case" __ Expr _ Block)+
#                       _ "}"

# Tuple              <- "#(" _ ExprSequence _ ")"

# Array              <- "[" _ ExprSequence? _ "]" / "[" Expr _ ".." _ Expr "]"

# Table              <- "[" _ (KeyValues / ":") _ "]"
# KeyValues          <- KeyValue (_ "," _ KeyValues)*
# KeyValue           <- Key _ ":" _ Value
# Key                <- Expr
# Value              <- Expr

#AnonymousFunction  <- "fn" _ "(" _ Params _ ")" _ Block

Primary            <- Literal /
                      ParenthesizedExpr /
                      Variable /
                      FunctionCall

Literal            <- Boolean /
                      Number /
                      Character /
                      String

Boolean            <- "true" / "false"

Number             <- FloatingPoint / Integral
FloatingPoint      <- [0-9]* "." [0-9]+ ExponentPart? / [0-9]+ ExponentPart
ExponentPart       <- [eE] [+-]? [0-9]+
Integral           <- OctalIntegral / HexIntegral / BinaryIntegral / BigIntegral /
                      DecimalIntegral
OctalIntegral      <- "0"[0-7]+
HexIntegral        <- "0x"[0-9a-fA-F]+
BinaryIntegral     <- "0b"[01]+
BigIntegral        <- [0-9]+"b"
DecimalIntegral    <- [0-9]+

Character          <- "'" ( Escape / NonQuoteChar ) "'"
Escape             <- "\\" ( [abfnrtv'"\\] /
                      "x" HexDigit HexDigit /
                      "u" HexDigit HexDigit HexDigit HexDigit /
                      "U" HexDigit HexDigit HexDigit HexDigit
                          HexDigit HexDigit HexDigit HexDigit /
                      OctalDigit /
                      OctalDigit OctalDigit /
                      OctalDigit OctalDigit OctalDigit )
HexDigit           <- [0-9a-fA-F]
OctalDigit         <- [0-7]
NonQuoteChar       <- [^']

String             <- RegularString / RawString
RegularString      <- '"' ( EscapeSequence / [^"] )* '"'
EscapeSequence     <- "\\" [btnvfr"\\]
RawString          <- 'r"' [^"]* '"'

ParenthesizedExpr  <- "(" _ Expr _ ")"

FunctionCall       <- FunctionName _ "(" _ Arguments? _ ")"
Arguments          <- Expr _ (',' _ Expr)*

Variable          <- Identifier
#UnboundVariable   <- "?" Variable
Identifier        <- [a-zA-Z_][a-zA-Z_0-9_]*
_                 <- (WS / Comments)*
#__                <- WS / Comments
WS                <- [ \t\r\n]+
Comments          <- SingleLineComment / BlockComment
SingleLineComment <- '//' (!EOL .)* EOL?
EOL               <- '\r\n' / '\n' / '\r'
BlockComment      <- '/*' (!'*/' .)* '*/'
EOF               <- _ !.

%%
int main() {
    satie_context_t *context = satie_create(NULL);
    satie_parse(context, NULL);
    satie_destroy(context);
    return 0;
}
