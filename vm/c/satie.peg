%prefix "satie"

%value "ast_node_t*"
%auxil "ast_ctrl_t*"

%header {
#include "ast.h"
}

%source {
#include "ast.h"
}

Program          <- WS* Import* If* EndOfFile
#TopLevelExpr* MainFunctionExpr? TopLevelExpr*
Import           <- "import" WS+ (i:Identifier WS* "=")? WS* m:ModulePath {
                        fprintf(stderr, "BAJS\n");
                                        $$ = create_import_node(auxil, i, m);
                    } WS+
Identifier       <- < [a-zA-Z_][a-zA-Z0-9_]* > {
                        fprintf(stderr, "BAJS\n");
                        $$ = create_identifier_node(auxil, (char*)($1));
                    }
ModulePath       <- i:Identifier {
                        fprintf(stderr, "BAJS\n");
                        $$ = create_module_path_node(auxil, i);
                    } ("." i:Identifier {
                                            fprintf(stderr, "BAJS\n");
                        $$ = add_module_path_identifier(auxil, $$, i);
                    })* ("." "*" {
                                            fprintf(stderr, "BAJS\n");
                        $$ = set_module_path_wildcard(auxil, $$);
                    })?


Exprs            <- Expr WS+ Exprs / Expr
Expr             <- If / IfElse



If               <- "if" WS+ Expr WS+ "{" Exprs "}" WS+
IfElse           <- "if" WS+ Expr WS+ "{" Exprs "}" WS+ "else" WS+ "{" Exprs "}" WS+




WS               <- [ \t\r\n]
EndOfFile        <- WS* !.



#TopLevelExpr     <- EnumExpr / StructExpr / SingletonExpr
#EnumExpr         <- "enum" WS Identifier WS "{" WS (Identifier WS ("," WS Identifier WS)*)? "}" WS
#StructExpr       <- "struct" WS Identifier WS Block
#Block            <- "{" WS String* "}" WS
#String           <- "\"" (![\"\\] / "\\" .)* "\""
#SingletonExpr    <- "singleton" WS Identifier WS Block
#MainFunctionExpr <- "main" WS "(" WS Identifier? WS ")" WS Block

%%
int main() {
    ast_node_t* root_node = create_root_node();
    ast_ctrl_t ctrl;
    ctrl.line = 1;
    ctrl.column = 1;
    ctrl.root_node = root_node;
    ctrl.managed_node = root_node;
    fprintf(stderr, "A");
    satie_context_t *context = satie_create(&ctrl);
    fprintf(stderr, "B");
    satie_parse(context, NULL);
    //dump_ast(ctrl.root_node, 0);
    satie_destroy(context);
    return 0;
}
