%prefix "satie"

%source {
static const char *dbg_str[] = { "Evaluating rule", "Matched rule", "Abandoning rule" };
#define PCC_DEBUG(auxil, event, rule, level, pos, buffer, length) \
    fprintf(stderr, "%*s%s %s @%zu [%.*s]\n", (int)((level) * 2), "", dbg_str[event], rule, pos, (int)(length), buffer)
}

Program            <- _ Import* _ StructEnum* _ MainFunctionDef _ StructEnum* EOF { fprintf(stderr, "Program\n"); }
StructEnum         <- (Struct / Enum) { fprintf(stderr, "StructEnum\n"); }
Import             <- "FIXME" { fprintf(stderr, "Import\n"); }
Struct             <- "FIXME" { fprintf(stderr, "Struct\n"); }
Enum               <- "FIXME" { fprintf(stderr, "Enum\n"); }
MainFunctionDef    <- "fn" _ "main" _ "(" _ Variable? _ ")" _ Block { fprintf(stderr, "MainFunctionDef\n"); }
Block              <- "{" _ ExprSequence _ "}" { fprintf(stderr, "Block\n"); }
ExprSequence       <- (Assignment /
                       MatchOperation /
                       FunctionDef /
                       AnonFunctionDef /
                       Expr) (_ "," _ ExprSequence)* { fprintf(stderr, "ExprSequence\n"); }
Assignment         <- Variable _ "=" _ Expr { fprintf(stderr, "Assignment\n"); }
MatchOperation     <- "FIXME" { fprintf(stderr, "MatchOperation\n"); }
FunctionDef        <- "fn" _ FunctionName _ "(" _ Params? _ ")" _ Block { fprintf(stderr, "FunctionDef\n"); }
FunctionName       <- Identifier { fprintf(stderr, "FunctionName\n"); }
Params             <- NonDefaultParams _ "," _ DefaultParams /
                      NonDefaultParams /
                      DefaultParams { fprintf(stderr, "Params\n"); }
NonDefaultParams   <- NonDefaultParam (_ "," _ NonDefaultParam)* { fprintf(stderr, "NonDefaultParams\n"); }
NonDefaultParam    <- Variable !(_ "=") { fprintf(stderr, "NonDefaultParam\n"); }
DefaultParams      <- DefaultParam (_ "," _ DefaultParam)* { fprintf(stderr, "DefaultParams\n"); }
DefaultParam       <- Variable _ "=" _ Expr { fprintf(stderr, "DefaultParam\n"); }
AnonFunctionDef    <- "fn" _ "(" _ Params _ ")" _ Block { fprintf(stderr, "AnonFunctionDef\n"); }
Expr               <- LogicalExpr /
                      ArithmeticExpr /
                      CharacterExpr /
                      StringExpr { fprintf(stderr, "Expr\n"); }
LogicalExpr       <- Or { fprintf(stderr, "LogicalExpr\n"); }
Or                <- And (_ "||" _ And)* { fprintf(stderr, "Or\n"); }
And               <- Not (_ "&&" _ Not)* { fprintf(stderr, "And\n"); }
Not               <- "!" _ LogicalPrimary / LogicalPrimary { fprintf(stderr, "Not\n"); }
LogicalPrimary    <- Boolean / NonArithmetic / BasePrimary { fprintf(stderr, "LogicalPrimary\n"); }
Boolean           <- "true" / "false" { fprintf(stderr, "Boolean\n"); }
NonArithmetic      <- BasePrimary !Number { fprintf(stderr, "NonArithmetic\n"); }
BasePrimary       <- FunctionCall /
                     If /
                     Switch /
                     Match /
                     Receive /
                     Block /
                     Tuple /
                     Array /
                     Table /
                     Variable /
                     UnboundVariable /
                     ParenthesizedExpr { fprintf(stderr, "BasePrimary\n"); }
FunctionCall       <- FunctionName _ "(" _ Arguments? _ ")" { fprintf(stderr, "FunctionCall\n"); }
Arguments          <- Expr _ (',' _ Expr)* { fprintf(stderr, "Arguments\n"); }
If                 <- "if" __ Expr _ Block
                      (_ "elseif" __ Expr _ Block)*
                      (_ "else" _ Block)? { fprintf(stderr, "If\n"); }
Switch             <- "switch" __ Expr _ "{"
                      (_ "case" _ Expr _ Block)+
                      (_ "default" _ Block)?
                      _ "}" { fprintf(stderr, "Switch\n"); }
Match              <- "match" __ Expr _ "{"
                      (_ "case" __ Expr _ Block)+
                      _ "}" { fprintf(stderr, "Match\n"); }
Receive            <- "FIXME" { fprintf(stderr, "Receive\n"); }
Tuple              <- "#(" _ ExprSequence? _ ")" { fprintf(stderr, "Tuple\n"); }
Array              <- "[" _ ExprSequence? _ "]" / "[" Expr _ ".." _ Expr "]" { fprintf(stderr, "Array\n"); }
Table              <- "[" _ (KeyValues / ":") _ "]" { fprintf(stderr, "Table\n"); }
KeyValues          <- KeyValue (_ "," _ KeyValues)* { fprintf(stderr, "KeyValues\n"); }
KeyValue           <- Key _ ":" _ Value { fprintf(stderr, "KeyValue\n"); }
Key                <- Expr { fprintf(stderr, "Key\n"); }
Value              <- Expr { fprintf(stderr, "Value\n"); }
ParenthesizedExpr  <- "(" _ Expr _ ")" { fprintf(stderr, "ParenthesizedExpr\n"); }
ArithmeticExpr    <- Add { fprintf(stderr, "ArithmeticExpr\n"); }
Add               <- Multiplicate (_ ("+" / "-") _ Multiplicate)* { fprintf(stderr, "Add\n"); }
Multiplicate      <- Unary (_ ("*" / "/") _  Unary)* { fprintf(stderr, "Multiplicate\n"); }
Unary             <- ("+" / "-")? ArithmeticPrimary { fprintf(stderr, "Unary\n"); }
ArithmeticPrimary <- Number / NonLogical / BasePrimary { fprintf(stderr, "ArithmeticPrimary\n"); }
Number             <- FloatingPoint / Integral { fprintf(stderr, "Number\n"); }
FloatingPoint      <- [0-9]* "." [0-9]+ ExponentPart? / [0-9]+ ExponentPart { fprintf(stderr, "FloatingPoint\n"); }
ExponentPart       <- [eE] [+-]? [0-9]+ { fprintf(stderr, "ExponentPart\n"); }
Integral           <- OctalIntegral / HexIntegral / BinaryIntegral / BigIntegral /
                      DecimalIntegral { fprintf(stderr, "Integral\n"); }
OctalIntegral      <- "0"[0-7]+ { fprintf(stderr, "OctalIntegral\n"); }
HexIntegral        <- "0x"[0-9a-fA-F]+ { fprintf(stderr, "HexIntegral\n"); }
BinaryIntegral     <- "0b"[01]+ { fprintf(stderr, "BinaryIntegral\n"); }
BigIntegral        <- [0-9]+"b" { fprintf(stderr, "BigIntegral\n"); }
DecimalIntegral    <- [0-9]+ { fprintf(stderr, "DecimalIntegral\n"); }
NonLogical         <- BasePrimary !Boolean { fprintf(stderr, "NonLogical\n"); }
CharacterExpr     <- Character { fprintf(stderr, "CharacterExpr\n"); }
Character          <- "'" ( Escape / NonQuoteChar ) "'" { fprintf(stderr, "Character\n"); }
Escape             <- "\\" ( [abfnrtv'"\\] /
                      "x" HexDigit HexDigit /
                      "u" HexDigit HexDigit HexDigit HexDigit /
                      "U" HexDigit HexDigit HexDigit HexDigit
                          HexDigit HexDigit HexDigit HexDigit /
                      OctalDigit /
                      OctalDigit OctalDigit /
                      OctalDigit OctalDigit OctalDigit ) { fprintf(stderr, "Escape\n"); }
HexDigit           <- [0-9a-fA-F] { fprintf(stderr, "HexDigit\n"); }
OctalDigit         <- [0-7] { fprintf(stderr, "OctalDigit\n"); }
NonQuoteChar       <- [^'] { fprintf(stderr, "NonQuoteChar\n"); }
StringExpr        <- String { fprintf(stderr, "StringExpr\n"); }
String             <- RegularString / RawString { fprintf(stderr, "String\n"); }
RegularString      <- '"' ( EscapeSequence / [^"] )* '"' { fprintf(stderr, "RegularString\n"); }
EscapeSequence     <- "\\" [btnvfr"\\] { fprintf(stderr, "EscapeSequence\n"); }
RawString          <- 'r"' [^"]* '"' { fprintf(stderr, "RawString\n"); }
Variable          <- Identifier { fprintf(stderr, "Variable\n"); }
Identifier        <- [a-zA-Z_][a-zA-Z_0-9_]* { fprintf(stderr, "Identifier\n"); }
UnboundVariable   <- "?" Variable { fprintf(stderr, "UnboundVariable\n"); }
_                 <- (WS / Comments)* { fprintf(stderr, "_\n"); }
__                <- WS / Comments { fprintf(stderr, "__\n"); }
WS                <- [ \t\r\n]+ { fprintf(stderr, "WS\n"); }
Comments          <- SingleLineComment / BlockComment { fprintf(stderr, "Comments\n"); }
SingleLineComment <- '//' (!EOL .)* EOL? { fprintf(stderr, "SingleLineComment\n"); }
EOL               <- '\r\n' / '\n' / '\r' { fprintf(stderr, "EOL\n"); }
BlockComment      <- '/*' (!'*/' .)* '*/' { fprintf(stderr, "BlockComment\n"); }
EOF               <- _ !. { fprintf(stderr, "EOF\n"); }
%%
int main() {
    satie_context_t *context = satie_create(NULL);
    satie_parse(context, NULL);
    satie_destroy(context);
    return 0;
}


