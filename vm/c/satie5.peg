%prefix "satie"

%source {
static const char *dbg_str[] = { "Evaluating rule", "Matched rule", "Abandoning rule" };
#define PCC_DEBUG(auxil, event, rule, level, pos, buffer, length) \
    fprintf(stderr, "%*s%s %s @%zu [%.*s]\n", (int)((level) * 2), "", dbg_str[event], rule, pos, (int)(length), buffer)
}

Program            <- _ MainFunction EOF { fprintf(stderr, "Program\n"); }
MainFunction       <- "fn" _ "main" _ "(" _ Variable? _ ")" _ Block { fprintf(stderr, "MainFunction\n"); }
Block              <- "{" _ ExprSequence _ "}" { fprintf(stderr, "Block\n"); }
ExprSequence       <- Expr (_ "," _ Expr)* { fprintf(stderr, "ExprSequence\n"); }
Expr               <- Assignment /
                      LogicalOr /
                      Primary { fprintf(stderr, "Expr\n"); }
LogicalOr          <- LogicalAnd (_ "||" _ LogicalAnd)* { fprintf(stderr, "LogicalOr\n"); }
Assignment         <- Variable _ "=" _ LogicalOr { fprintf(stderr, "Assignment\n"); }
LogicalAnd         <- BitwiseOr (_ "&&" _ BitwiseOr)* { fprintf(stderr, "LogicalAnd\n"); }
BitwiseOr          <- BitwiseXor (_ "|" _ BitwiseXor)* { fprintf(stderr, "BitwiseOr\n"); }
BitwiseXor         <- BitwiseAnd (_ "^" _ BitwiseAnd)* { fprintf(stderr, "BitwiseXor\n"); }
BitwiseAnd         <- Equality (_ "&" _ Equality)* { fprintf(stderr, "BitwiseAnd\n"); }
Equality           <- Relational (_ ("==" / "!=" / "is" / "!is") _ Relational)* { fprintf(stderr, "Equality\n"); }
Relational         <- Shift (_ ("<" / "<=" / ">" / ">=") _ Shift)* { fprintf(stderr, "Relational\n"); }
Shift              <- _ Addition (_ ("<<" / ">>" / ">>>") _ Addition _)* { fprintf(stderr, "Shift\n"); }
Addition           <- _ Multiplication _ (_ (_ "+" _ / "-" / "~") _ Multiplication _)* { fprintf(stderr, "Addition\n"); }
Multiplication     <- Unary (_ ("*" / "/" / "%") _ Unary)* { fprintf(stderr, "Multiplication\n"); }
Unary              <- ("+" / "-" / "!") _ Primary / Primary { fprintf(stderr, "Unary\n"); }
Primary            <- [0-9]+ /
                      ParenthesizedExpr /
                      Variable { fprintf(stderr, "Primary\n"); }
ParenthesizedExpr  <- "(" _ Expr _ ")" { fprintf(stderr, "ParenthesizedExpr\n"); }
Variable          <- Identifier { fprintf(stderr, "Variable\n"); }
Identifier        <- [a-zA-Z_][a-zA-Z_0-9_]* { fprintf(stderr, "Identifier\n"); }
_                 <- (WS / Comments)* { fprintf(stderr, "_\n"); }
WS                <- [ \t\r\n]+ { fprintf(stderr, "WS\n"); }
Comments          <- SingleLineComment / BlockComment { fprintf(stderr, "Comments\n"); }
SingleLineComment <- '//' (!EOL .)* EOL? { fprintf(stderr, "SingleLineComment\n"); }
EOL               <- '\r\n' / '\n' / '\r' { fprintf(stderr, "EOL\n"); }
BlockComment      <- '/*' (!'*/' .)* '*/' { fprintf(stderr, "BlockComment\n"); }
EOF               <- _ !. { fprintf(stderr, "EOF\n"); }
%%
int main() {
    satie_context_t *context = satie_create(NULL);
    satie_parse(context, NULL);
    satie_destroy(context);
    return 0;
}


