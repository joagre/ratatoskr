%prefix "satie"

%earlysource {
    static const char *dbg_str[] = { "Evaluating rule", "Matched rule", "Abandoning rule" };
    #define PCC_DEBUG(auxil, event, rule, level, pos, buffer, length) \
        fprintf(stderr, "%*s%s %s @%zu [%.*s]\n", (int)((level) * 2), "", dbg_str[event], rule, pos, (int)(length), buffer)
}

# Top level constructs

Program               <- _ (Imports _)? Exprs EOF
Imports               <- Import (_ Import)*
Import                <- "import" _ (Identifier _ "=" _)? _ ModulePath
ModulePath            <- Identifier ("." Identifier)* ("." "*")?
Exprs                 <- Expr (_ "," _ Expr)*

#FunctionDef           <- "fn" _ Identifier _ "(" _ Params? _ ")" _ BlockExpr
#Params                <- NonDefaultParams _ "," _ DefaultParams /
#                         NonDefaultParams /
#                         DefaultParams
#NonDefaultParams      <- Identifier !(_ "=") (_ "," _ Identifier)*
#DefaultParams         <- Identifier _ "=" _ Expr (_ "," _ Identifier)*
#BlockExpr             <- "{" _ BlockSequence _ "}"
#BlockSequence         <- BlockConstruct (_ "," _ BlockConstruct)*
#BlockConstruct        <- FunctionDef / Expr

# Expression

Expr                  <- AssignExpr
AssignExpr            <- AndExpr (_ "=" _ AndExpr)*
AndExpr               <- MulExpr (_ "+" _ MulExpr)*
MulExpr               <- PostfixExpr (_ "*" _ PostfixExpr)*
PostfixExpr           <- PrimaryExpr _  ("." _ Identifier /
                                         "(" _ Args? _ ")" /
                                         "[" _ Expr _ "]")*

Args                  <- PositionalArgs / NamedArgs
PositionalArgs        <- !NamedArg Expr (_ "," _ Expr)*
NamedArgs             <- NamedArg (_ "," _ NamedArg)*
NamedArg              <- Identifier _ ":" _ Expr

# Expr                  <- AssignExpr
# AssignExpr            <- OrOrExpr (_ "=" _ AssignExpr)?
# OrOrExpr              <- AndAndExpr (_ "||" _ OrOrExpr)?
# AndAndExpr            <- (CompareExpr / OrExpr) (_ "&&" _ AndAndExpr)?
# OrExpr                <- XorExpr (_ "|" _ OrExpr)?
# XorExpr               <- AndExpr (_ "^" _ XorExpr)?
# AndExpr               <- ShiftExpr (_ "&" _ AndExpr)?
# CompareExpr           <- EqualExpr /
#                          IdentityExpr /
#                          RelExpr /
#                          InExpr /
#                          ShiftExpr
# EqualExpr             <- ShiftExpr _ ("==" / "!=") _ ShiftExpr
# IdentityExpr          <- ShiftExpr _ ("!is" / "is") _ ShiftExpr
# RelExpr               <- ShiftExpr _ ("<=" / ">=" / "<" / ">") _ ShiftExpr
# InExpr                <- ShiftExpr (_ ("!in" / "in") _ ShiftExpr)?
# ShiftExpr             <- AddExpr (_ (">>>" / ">>" / "<<") _ AddExpr)?
# AddExpr               <- (MulExpr / CatExpr) (_ ("+" / "-") _ MulExpr)?
# CatExpr               <- MulExpr (_ "~" _ AddExpr)?
# MulExpr               <- UnaryExpr (_ ("*" / "/" / "%") _ UnaryExpr)?
# UnaryExpr             <- ("+" / "-" / "!") _ UnaryExpr /
#                          ComplementExpr /
#                          NewExpr /
#                          CastExpr /
#                          PowExpr
# ComplementExpr        <- "~" _ UnaryExpr
# NewExpr               <- "new" _ Identifier _ "(" _ Args? _ ")"?
# CastExpr              <- "cast" _ "(" _ ("int" / "float") _ ")" _ UnaryExpr
# PowExpr               <- PostfixExpr (_ "^^" _ UnaryExpr)?
# PostfixExpr           <- PrimaryExpr _ (IndexExpr / SliceExpr)*
#                          ("." _ Identifier /
#                           "(" _ ArgumentList? _ ")")?
# IndexExpr             <- "[" _ ArgumentList _ "]"

# ArgumentList          <- AssignExpr ("," AssignExpr)*

# # Changed
# SliceExpr <- "[" _ "]" / "[" _ AssignExpr _ ".." _ AssignExpr _ "]"

PrimaryExpr <- "this"
                   / "super"
                   / "null"
                   / "true"
                   / "false"
                   / "$"
                   / Identifier
                   / "." _ Identifier
                   / NumberLiteral
                   / "(" _ Expr _ ")"

Identifier             <- [a-zA-Z_][a-zA-Z_0-9]*
NumberLiteral    <- [0-9]+

_                  <- WS*
#__                 <- WS+
WS                 <- [ \t\r\n]
EOF                <- _ !.

%%
int main() {
    satie_context_t *context = satie_create(NULL);
    satie_parse(context, NULL);
    satie_destroy(context);
    return 0;
}
