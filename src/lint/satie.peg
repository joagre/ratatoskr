%prefix "satie"

%header {
    #include <stdarg.h>
    #include <satie_error.h>
    #include "satie_auxil.h"
    #include "symbol_table.h"
    #include "hm.h"

/*
    static const char *dbg_str[] = { "Evaluating rule", "Matched rule", "Abandoning rule" };
    #define PCC_DEBUG(auxil, event, rule, level, pos, buffer, length) \
    if (strcmp(rule, "WS") != 0 && strcmp(rule, "_") != 0 && strcmp(rule, "__") != 0) \
        fprintf(stderr, "%*s%s %s @%zu [%.*s]\n", (int)((level) * 2), "", dbg_str[event], \
                rule, pos, (int)(length), buffer)
*/

    static int ROW = 1;

    static int satie_getchar(satie_auxil_t* _auxil) {
        int c = getchar();
        if (c == '\n') {
            ROW++;
        }
        return c;
    }

    static void panic(const char *fmt, ...) {
        va_list args;
        va_start(args, fmt);
        printf("\033[31mError:\033[0m ");
        vfprintf(stderr, fmt, args);
        printf("\n");
        va_end(args);
        fflush(stdout);
        exit(1);
    }

    static void satie_error(satie_auxil_t* auxil) {
        printf("Bailing out near line %d\n", ROW);
        exit(1);
    }
}

%auxil "satie_auxil_t*"
%value "ast_node_t*"

%source {
#define PCC_GETCHAR(auxil) satie_getchar(auxil)
#define PCC_ERROR(auxil) satie_error(auxil)
}

#
# Top level structure
#

Program <- _ (i:Imports __)? t:TopLevelDefs EOF { $$ = CN(PROGRAM, 2, i, t); }
TopLevelDefs <- t:TopLevelDef { $$ = CN(TOP_LEVEL_DEFS, 1, t); } (__ t:TopLevelDef { AC($$, t); } / TopLevelDefError)*
TopLevelDef <- (t:AliasDef / t:TypeDef / t:EnumDef / t:FunctionDef / t:InterfaceDef / t:RecordDef / t:TaskDef) { $$ = t; }
TopLevelDefError <- ("," / ";") {
    panic("Unexpected %s between top level definitions on line %d",
          $0, auxil->row);
}

#
# Import
#

Imports <- i:Import { $$ = CN(IMPORTS, 1, i); } (__ i:Import { AC($$, i); })*
Import <- "import" __ (ma:ModuleAlias _ "=" _)? _ m:ModuleComponents (_ ":" _ i:ImportedNames)? { $$ = CN(IMPORT, 3, ma, m, i); }
ModuleAlias <- Identifier { $$ = CT(MODULE_ALIAS, $0); }
ModuleComponents <- m:ModuleComponent {$$ = CN(MODULE, 1, m); } ( "." m:ModuleComponent { AC($$, m); })*
ModuleComponent <- Identifier { $$ = CT(MODULE_COMPONENT, $0); }
ImportedNames <- m:ImportedName { $$ = CN(IMPORTED_NAMES, 1, m); } (_ "," _ m:ImportedName { AC($$, m); })*
ImportedName <- Identifier { $$ = CT(IMPORTED_NAME, $0); }

#
# Alias definition
#

AliasDef <- "alias" _ n:Name ("<" _ tv:TypeVariables _ ">")? _ "=" _ t:Type { $$ = CN(ALIAS_DEF, 3, n, tv, t); }

#
# Type definition
#

TypeDef <- "type" _ n:Name ("<" _ t:TypeVariables _ ">")? _ "=" _ tc:TypeConstructors { $$ = CN(TYPE_DEF, 3, n, t, tc); }
TypeConstructors <- t:TypeConstructor { $$ = CN(TYPE_CONSTRUCTORS, 1, t); } (_ "||" _ t:TypeConstructor { AC($$, t); })*
TypeConstructor <- n:Name "<" _ t:Types? _ ">" { $$ = CN(TYPE_CONSTRUCTOR, 2, n, t); }

#
# Enumeration definition
#

EnumDef <- "enum" __ ed:EnumDefName _ "{" _ e:Enums _ "}" { $$ = CN(ENUM_DEF, 2, ed, e); }
EnumDefName <- Identifier { $$ = CT(ENUM_DEF_NAME, $0); }
Enums <- e:Enum { $$ = CN(ENUMS, 1, e); } (__ e:Enum { AC($$, e); } / EnumValueError)*
Enum <- en:EnumName (_ "=" _ e:Expr)? { $$ = CN(ENUM, 2, en, CN(ENUM_VALUE, 1, e)); }
EnumName <- Identifier { $$ = CT(ENUM_NAME, $0); }
EnumValueError <- ("," / ";") {
    panic("Unexpected %s between enum values on line %d", $0, auxil->row);
}

#
# Function definition
#

FunctionDef <- e:Export? _ "fn" __ f:FunctionName ("<" _ tv:TypeVariables _ ">")? _ "(" _ p:Params? _ ")" _ ("->" _ t:Type _)? b:BlockExpr { $$ = CN(FUNCTION_DEF, 6, e, f, tv, p, CCN(TYPE, 1, t), b); }
Export <- "export" { $$ = CT(EXPORT, NULL); }
FunctionName <- Identifier { $$ = CT(FUNCTION_NAME, $0); }
Params <- n:Param { $$ = CN(PARAMS, 1, n); } (_ "," _ n:Param { AC($$, n); })*
Param <- n:Name (_ "is" _ t:Type)? { $$ = RN(n, PARAM_NAME); AC($$, CCN(TYPE, 1, t));}

# KEEP
#Param <- pn:ParamName (_ "is" _ t:Type)? { AC(pn, CCN(TYPE, 1, t));}
#ParamName <- Identifier { $$ = CT(PARAM_NAME, $0); }

#
# Interface definition
#

InterfaceDef <- "interface" __ i:InterfaceName ("<" _ t:TypeVariables _ ">")? _ "{" _
                 im:InterfaceMembers _
                 "}" { $$ = CN(INTERFACE_DEF, 3, i, t, im); }
InterfaceName <- Identifier { $$ = CT(INTERFACE_NAME, $0); }
InterfaceMembers <- i:InterfaceMember { $$ = CN(INTERFACE_MEMBERS, 1, i); } (_ i:InterfaceMember { AC($$, i); } / InterfaceMemberError)*
InterfaceMember <- (i:InterfaceConstructor / i:InterfaceDestructor / i:InterfaceMemberMethod / i:InterfaceMemberProperty) { $$ = i; }
InterfaceConstructor <- "this" _ "(" _ p:Params? _ ")" (_ "->" _ t:Type)? { $$ = CN(INTERFACE_CONSTRUCTOR, 2, p, CCN(TYPE, 1, t)); }
InterfaceDestructor <- "~this" _ "(" _ p:Params? _ ")" (_ "->" _ t:Type)? { $$ = CN(INTERFACE_DESTRUCTOR, 3, p, CCN(TYPE, 1, t)); }
InterfaceMemberMethod <- m:MemberAccess _ i:InterfaceMethod { $$ = CN(INTERFACE_MEMBER_METHOD, 2, m, i); }
InterfaceMethod <- "fn" _ f:FunctionName ("<" _ tv:TypeVariables _ ">")? _ "(" _ p:Params? _ ")" _  ("->" _ t:Type _)? { $$ = CN(INTERFACE_METHOD, 4, f, tv, p, CCN(TYPE, 1, t)); }
InterfaceMemberProperty <- ((m:MemberAccess (_ c:Const)? / c:Readonly) _ n:Name  (_ "is" _ t:Type { AC(n, CCN(TYPE, 1, t)); })?) { $$ = CN(INTERFACE_MEMBER_PROPERTY, 4, m, c, n, t); }
InterfaceMemberError <- ("," / ";") {
    panic("Unexpected %s between members on line %d", $0, auxil->row);
}

#
# Record definition
#

RecordDef <- "record" __ n:Name ("<" _ t:TypeVariables _ ">")? _ ( "implements" _ i:Interfaces _ )? "{" _
             c:RecordMembers _
             "}" { $$ = CN(RECORD_DEF, 4, n, t, i, c); }
Interfaces <- i:Interface { $$ = CN(INTERFACES, 1, i); } (_ "," _ i:Interface { AC($$, i); })*
Interface <- n:Name ("<" _ t:Types _ ">")? { $$ = CN(INTERFACE, 2, n, t); }
RecordMembers <- c:RecordMember { $$ = CN(RECORD_MEMBERS, 1, c); } (_ c:RecordMember { AC($$, c); } / RecordMemberError)*
RecordMember <- (c:Constructor / c:Destructor / c:MemberMethod / c:MemberProperty) { $$ = c; }
Constructor <- "this" _ "(" _ p:Params? _ ")" (_ "->" _ t:Type)? _ b:BlockExpr { $$ = CN(RECORD_CONSTRUCTOR, 3, p, CCN(TYPE, 1, t), b); }
Destructor <- "~this" _ "(" _ p:Params? _ ")" (_ "->" _ t:Type)? _ b:BlockExpr { $$ = CN(RECORD_DESTRUCTOR, 3, p, CCN(TYPE, 1, t), b); }
MemberMethod <- m:MemberAccess _ f:FunctionDef { $$ = CN(MEMBER_METHOD, 2, m, f); }
MemberAccess <- "public" { $$ = CT(PUBLIC, NULL); } / "private" { $$ = CT(PRIVATE, NULL); }
MemberProperty <- ((m:MemberAccess (_ c:Const)? / c:Readonly) _ n:Name (_ "is" _ t:Type { AC(n, CCN(TYPE, 1, t)); })? (_ "=" _ e:Expr)?) { $$ = CN(MEMBER_PROPERTY, 4, m, c, n, e); }
RecordMemberError <- ("," / ";") {
    panic("Unexpected %s between members on line %d", $0, auxil->row);
}
Const <- "const" { $$ = CT(CONST, NULL); }
Readonly <- "readonly" { $$ = CT(READONLY, NULL); }

#
# Task definition
#

TaskDef <- "task" __ n:Name ("<" _ t:TypeVariables _ ">")? _ ( "implements" _ i:Interfaces _ )? "{" _
           c:RecordMembers _
           "}" { $$ = CN(TASK_DEF, 4, n, t, i, c); }

#
# Type
#

Types <- t:Type { $$ = CN(TYPES, 1, t); } (_ "," _ t:Type { AC($$, t); })*
Type <- (t:BasicType / t:ListType / t:FunctionType / t:TupleType / t:MapType / t:ConstructorType / t:TypeVariable / t:Name) { $$ = t; }
BasicType <- (b:BoolType / b:IntType / b:FloatType / b:CharType / b:StringType / b:TaskType) { $$ = b;}
BoolType <- "Bool" { $$ = CT(BOOL_TYPE, NULL); }
IntType <- "Int" { $$ = CT(INT_TYPE, NULL); }
FloatType <- "Float" { $$ = CT(FLOAT_TYPE, NULL); }
CharType <- "Char" { $$ = CT(CHAR_TYPE, NULL); }
StringType <- "String" { $$ = CT(STRING_TYPE, NULL); }
TaskType <- "Task" { $$ = CT(TASK_TYPE, NULL); }
ListType <- "[" _ t:Type _ "]" {$$ = CN(LIST_TYPE, 1, t); } / "[" _ "]" { $$ = CT(EMPTY_LIST_TYPE, NULL); }
FunctionType <- "(" _ a:Type? _ "->" _ r:Type _ ")" { $$ = CN(FUNCTION_TYPE, 2, CN(ARG_TYPES, 1, a), r); } / "(" _ "{" _ a:ArgTypes _ "}" _ "->" _ r:Type _ ")" { $$ = CN(FUNCTION_TYPE, 2, a, r); }
ArgTypes <- a:Type { $$ = CN(ARG_TYPES, 1, a); } (_ "," _ a:Type { AC($$, a); })*
TupleType <- "(" _ t:Type { $$ = CN(TUPLE_TYPE, 1, t); } (_ "," _ t:Type { AC($$, t); })* _ ")" / "(" _ ")" { $$ = CT(EMPTY_TUPLE_TYPE, NULL); }
MapType <- "[" _ k:Type _ ":" _ v:Type _ "]" { $$ = CN(MAP_TYPE, 2, k, v); } / "[" _ ":" _ "]" { $$ = CT(EMPTY_MAP_TYPE, NULL); }
ConstructorType <- n:Name "<" _ t:Types? _ ">" { $$ = CN(CONSTRUCTOR_TYPE, 2, n, t); }
TypeVariables <- t:TypeVariable {$$ = CN(TYPE_VARIABLES, 1, t); } (_ "," _ t:TypeVariable { AC($$, t); })*
TypeVariable <- "$" Identifier { $$ = CT(TYPE_VARIABLE, $0); }

#
# Expression
#
# NOTE: Expressions can also be used for pattern matching. The grammar is
#       the same, but the semantics are different. "as" and "unbound" names
#       are only allowed in match expressions. This must be enforced in the
#       parser explicitly. Other expressions are also context sensitive. Be
#       sure to filter these out in the parser.
#

Exprs <- e:Expr { $$ = CN(EXPRS, 1, e); } (_ "," _ e:Expr { AC($$, e); })*

Expr <- "this" _ "(" _ a:DynamicArgs _ ")" { $$ = CN(THIS, 1, a); } / e:BindExpr { $$ = e; }

BindExpr <- l:Expr _ (("as" _ un:UnboundName _ "is" _ t:Type /
                       "is" _ t:Type _ "as" _ un:UnboundName /
                       "is" _ t:Type /
                       "as" _ un:UnboundName) _)? ":=" _
            r:Expr { $$ = CN(BIND, 4, l, CN(IS, 1, t), CN(AS, 1, un), r); } / e:LogicalOrExpr { $$ = e; }

LogicalOrExpr <- l:LogicalOrExpr _ "||" _ r:LogicalAndExpr { $$ = CN(OR, 2, l, r); } / e:LogicalAndExpr { $$ = e; }
LogicalAndExpr <- l:LogicalAndExpr _ "&&" _ r:BitwiseAndExpr { $$ = CN(AND, 2, l, r); } / e:BitwiseAndExpr { $$ = e; }
BitwiseAndExpr <- l:BitwiseAndExpr _ "&" _ r:BitwiseOrExpr { $$ = CN(BITWISE_AND, 2, l, r); } / e:BitwiseOrExpr { $$ = e; }
BitwiseOrExpr <- l:BitwiseOrExpr _ "|" _ r:GTEIntExpr { $$ = CN(BITWISE_OR, 2, l, r); } / e:GTEIntExpr { $$ = e; }
GTEIntExpr <- l:GTEIntExpr __ ">=" __ r:GTEFloatExpr { $$ = CN(GTE_INT, 2, l, r); } / e:GTEFloatExpr { $$ = e; }
GTEFloatExpr <- l:GTEFloatExpr __ ">=." __ r:GTIntExpr { $$ = CN(GTE_FLOAT, 2, l, r); } / e:GTIntExpr { $$ = e; }
GTIntExpr <- l:GTIntExpr __ ">" __ r:GTFloatExpr { $$ = CN(GT_INT, 2, l, r); } / e:GTFloatExpr { $$ = e; }
GTFloatExpr <- l:GTFloatExpr __ ">." __ r:LTEIntExpr { $$ = CN(GT_FLOAT, 2, l, r); } / e:LTEIntExpr { $$ = e; }
LTEIntExpr <- l:LTEIntExpr __ "<=" __ r:LTEFloatExpr { $$ = CN(LTE_INT, 2, l, r); } / e:LTEFloatExpr { $$ = e; }
LTEFloatExpr <- l:LTEFloatExpr __ "<=." __ r:LTIntExpr { $$ = CN(LTE_FLOAT, 2, l, r); } / e:LTIntExpr { $$ = e; }
LTIntExpr <- l:LTIntExpr __ "<" __ r:LTFloatExpr { $$ = CN(LT_INT, 2, l, r); } / e:LTFloatExpr { $$ = e; }
LTFloatExpr <- l:LTFloatExpr __ "<." __ r:NotEqualExpr { $$ = CN(LT_FLOAT, 2, l, r); } / e:NotEqualExpr { $$ = e; }
NotEqualIntExpr <- l:NotEqualIntExpr _ "!=" _ r:NotEqualFloatExpr { $$ = CN(NE, 3, l, CT(INT_TYPE, NULL), r); } / e:NotEqualFloatExpr { $$ = e; }
NotEqualFloatExpr <- l:NotEqualFloatExpr _ "!=." _ r:NotEqualExpr { $$ = CN(NE, 3, l, CT(FLOAT_TYPE, NULL), r); } / e:NotEqualExpr { $$ = e; }
NotEqualExpr <- l:NotEqualExpr _ "!" !("Int" / "Float") t:Name "=" _ r:EqualIntExpr { $$ = CN(NE, 3, l, t, r); } / e:EqualIntExpr { $$ = e; }
EqualIntExpr <- l:EqualIntExpr _ "==" _ r:EqualFloatExpr { $$ = CN(EQ, 3, l, CT(INT_TYPE, NULL), r); } / e:EqualFloatExpr { $$ = e; }
EqualFloatExpr <- l:EqualFloatExpr _ "==." _ r:EqualExpr { $$ = CN(EQ, 3, l, CT(FLOAT_TYPE, NULL), r); } / e:EqualExpr { $$ = e; }
EqualExpr <- l:EqualExpr _ "=" !("Int" / "Float") t:Name "=" _ r:RightShiftExpr { $$ = CN(EQ, 3, l, RN(t, EQ_TYPE), r); } / e:RightShiftExpr { $$ = e; }
RightShiftExpr <- l:RightShiftExpr __ ">>" __ e:LeftShiftExpr { $$ = CN(BSR, 2, l, e); } / e:LeftShiftExpr { $$ = e; }
LeftShiftExpr <- l:LeftShiftExpr __ "<<" __ e:ConsExpr { $$ = CN(BSL, 2, l, e); } / e:ConsExpr { $$ = e; }
ConsExpr <- l:ConsExpr _ "::" _ r:ListConcatExpr { $$ = CN(CONS, 2, l, r); } / e:ListConcatExpr { $$ = e; }
ListConcatExpr <- l:ListConcatExpr _ "@" _ r:MapConcatExpr { $$ = CN(CONCAT_LIST, 2, l, r); } / e:MapConcatExpr { $$ = e; }
MapConcatExpr <- l:MapConcatExpr _ "~" _ r:StringConcatExpr { $$ = CN(CONCAT_MAP, 2, l, r); } / e:StringConcatExpr { $$ = e; }
StringConcatExpr <- l:StringConcatExpr _ "^" _ r:SubIntExpr { $$ = CN(CONCAT_STRING, 2, l, r); } / e:SubIntExpr { $$ = e; }
SubIntExpr <- l:SubIntExpr _ "-" _ r:SubFloatExpr { $$ = CN(SUB_INT, 2, l, r); } / e:SubFloatExpr { $$ = e; }
SubFloatExpr <- l:SubFloatExpr _ "-." _ r:AddIntExpr { $$ = CN(SUB_FLOAT, 2, l, r); } / e:AddIntExpr { $$ = e; }
AddIntExpr <- l:AddIntExpr _ "+" _ r:AddFloatExpr { $$ = CN(ADD_INT, 2, l, r); } / e:AddFloatExpr { $$ = e; }
AddFloatExpr <- l:AddFloatExpr _ "+." _ r:ModExpr { $$ = CN(ADD_FLOAT, 2, l, r); } / e:ModExpr { $$ = e; }
ModExpr <- l:ModExpr _ "%" _ r:DivIntExpr { $$ = CN(MOD, 2, l, r); } / e:DivIntExpr { $$ = e; }
DivIntExpr <- l:DivIntExpr _ "/" _ r:DivFloatExpr { $$ = CN(DIV_INT, 2, l, r); } / e:DivFloatExpr { $$ = e; }
DivFloatExpr <- l:DivFloatExpr _ "/." _ r:MulIntExpr { $$ = CN(DIV_FLOAT, 2, l, r); } / e:MulIntExpr { $$ = e; }
MulIntExpr <- l:MulIntExpr _ "*" _ r:MulFloatExpr { $$ = CN(MUL_INT, 2, l, r); } / e:MulFloatExpr { $$ = e; }
MulFloatExpr <- l:MulFloatExpr _ "*." _ r:ExpExpr { $$ = CN(MUL_FLOAT, 2, l, r); } / e:ExpExpr { $$ = e; }
ExpExpr <- l:ExpExpr _ "^^" _ r:NotExpr { $$ = CN(EXP, 2, l, r); } / e:NotExpr { $$ = e; }
NotExpr <- "!" _ l:PosIntExpr { $$ = CN(NOT, 1, l); } / e:PosIntExpr { $$ = e; }
PosIntExpr <- "+" _ l:PosFloatExpr { $$ = CN(POS_INT, 1, l); } / e:PosFloatExpr { $$ = e; }
PosFloatExpr <- "+." _ l:NegIntExpr { $$ = CN(POS_FLOAT, 1, l); } / e:NegIntExpr { $$ = e; }
NegIntExpr <- "-" _ l:NegFloatExpr { $$ = CN(NEG_INT, 1, l); } / e:NegFloatExpr { $$ = e; }
NegFloatExpr <- "-." _ l:PostfixExpr { $$ = CN(NEG_FLOAT, 1, l); } / e:PostfixExpr { $$ = e; }
PostfixExpr <- (p:PrimaryExpr { $$ = CN(POSTFIX, 1, p); }
                (_ "<~" _ n:Name { AC($$, RN(n, TASK_CALL)); } /
                 _ "~>" _ n:Name { AC($$, RN(n, TASK_CAST)); } /
                 _ "." _ n:Name { AC($$, RN(n, DOT_NAME)); } /
                 _ "[" _ m:MapKeyValues _ "]" { AC($$, RN(m, MAP_UPDATE)); } /
                 _ "[" _ ":" _ e:Expr _ "]" { AC($$, CN(MAP_LOOKUP, 1, e)); } /
                 _ "[" _ s:Expr _ ".." _ e:Expr _ "]" { AC($$, CN(LIST_SLICE, 2, s, e)); } /
                 _ "[" _ i:IndexValues _ "]" { AC($$, i); } /
                 _ "[" _ e:Expr _ "]" { AC($$, CN(LIST_LOOKUP, 1, e)); } /
                 _ ("<" _ ee:Exprs? _ ">")? "(" _ a:Args? _ ")" { AC($$, CN(FUNCTION_CALL, 2, ee, a)); }
                )*
               )

IndexValues <- i:IndexValue { $$ = CN(LIST_UPDATE, 1, i); } (_ "," _ i:IndexValue { AC($$, i); })*
IndexValue <- i:Expr _ "=" _ v:Expr { $$ = CN(INDEX_VALUE, 2, i, v); }

PrimaryExpr <- "this" { $$ = CT(THIS, NULL); } /
               "$" { $$ = CT(SLICE_LENGTH, NULL); } /
               e:NewRecord {$$ = e;} /
               e:LaunchTask {$$ = e;} /
               e:ControlFlowExpr { $$ = e; } /
               e:Literal { $$ = e; } /
               e:UnboundName { $$ = e; } /
               e:Name { $$ = e; } /
               "(" _ e:Expr _ ")" { $$ = e; }

NewRecord <- "new" _ n:Name _ "(" a:DynamicArgs? ")" { $$ = CN(NEW_RECORD, 2, n, a); }
DynamicArgs <- (a:PositionalArgs / a:NamedArgs) { $$ = a; }
PositionalArgs <- !NamedArg e:Expr { $$ = CN(POSITIONAL_ARGS, 1, e); } (_ "," _ e:Expr { AC($$, e); })*
NamedArgs <- n:NamedArg { $$ = CN(NAMED_ARGS, 1, n); } (_ "," _ n:NamedArg { AC($$, n); })*
NamedArg <- n:Name _ ":" _ r:Expr { $$ = CN(NAMED_ARG, 2, n, r); }

LaunchTask <- "launch" _ n:Name _ "(" a:DynamicArgs? ")" { $$ = CN(LAUNCH_TASK, 2, n, a); }

ControlFlowExpr <- (c:IfExpr / c:SwitchExpr / c:BlockExpr) { $$ = c; }

IfExpr <- "if" __ ie:Expr _ be:BlockExpr { $$ = CN(IF, 2, ie, be); }
          (_ "elif" __ ee:Expr _ be:BlockExpr { AC($$, CN(ELIF, 2, ee, be)); })*
          (_ "else" _ ee:BlockExpr { AC($$, CN(ELSE, 1, ee)); })

SwitchExpr <- "switch" __ se:Expr { $$ = CN(SWITCH, 1, se); } _ "{"
              (_ "case" _ me:Exprs _ ("when" _ we:Expr { AC($$, CN(WHEN, 1, we)); } _)? "=>" _ be:Exprs { AC($$, CN(CASE, 2, me, be)); })+
              (_ "default" _ "=>" _ be:Exprs { AC($$, CN(DEFAULT, 1, be)); })? _
              "}"

BlockExpr <- "{" _ b:BlockLevelExprs _ "}" { $$ = b; }
BlockLevelExprs <- e:Expr { $$ = CN(BLOCK, 1, e); } (_ Comma _ e:Expr { AC($$, e); })*
Comma <- "," / ";" {
    panic("Unexpected ';' on line %d (use ',' as a separator between "
          "expressions)", auxil->row);
}

Literal <- (l:BasicLiteral / l:CompositeLiteral) { $$ = l; }

BasicLiteral <- (b:BoolLiteral / b:NumberLiteral / b:CharLiteral /
                 b:StringLiteral / b:FunctionLiteral / b:EnumLiteral) { $$ = b; }

CompositeLiteral <- (c:TupleLiteral / c:ListLiteral / c:MapLiteral / c:TypeConstructorLiteral) { $$ = c; }

BoolLiteral <- "true" { $$ = CT(TRUE, NULL); } / "false" { $$ = CT(FALSE, NULL); }

NumberLiteral <- (n:Float / n:Int) { $$ = n; }

Float <- (f:DecimalPointLeading / f:DecimalPointTrailing) { $$ = CT(FLOAT, $0); }
DecimalPointLeading <- [0-9]+ "." [0-9]+ ExponentPart?
DecimalPointTrailing <- [0-9]+ ExponentPart
ExponentPart <- [eE] [+-]? [0-9]+

Int <- (HexInt / BinaryInt / OctalInt / DecimalInt) { $$ = CT(INT, $0); }
HexInt <- "0x" [0-9a-fA-F]+
BinaryInt <- "0b" [01]+
OctalInt <- "0" [0-7]+
DecimalInt <- [0-9]+

CharLiteral <- "'" (c:EscapeChar / c:NonQuoteChar) "'" { $$ = CN(CHAR, 1, c); }
EscapeChar <- "\\" (
              [abfnrtv'"\\] /
              "x" HexDigit HexDigit /
              "u" HexDigit HexDigit HexDigit HexDigit /
              "U" HexDigit HexDigit HexDigit HexDigit
                  HexDigit HexDigit HexDigit HexDigit /
               OctalDigit /
               OctalDigit OctalDigit /
               OctalDigit OctalDigit OctalDigit
               ) { $$ = CT(ESCAPE_CHAR, $0); }
HexDigit <- [0-9a-fA-F]
OctalDigit <- [0-7]
NonQuoteChar <- [^'] { $$ = CT(NON_QUOTE_CHAR, $0); }

StringLiteral <- ('"' s:RegularString '"' / 'r"' s:RawString '"') { $$ = s; }
RegularString <- (EscapeSequence / [^"])* { $$ = CT(REGULAR_STRING, $0); }
EscapeSequence <- "\\" [btnvfr"\\]
RawString <- [^"]* { $$ = CT(RAW_STRING, $0); }

FunctionLiteral <- "fn" _ (f:FunctionName _)? "(" _ p:Params? _ ")" _ ("->" _ Type _)? e:BlockExpr { $$ = CN(FUNCTION_LITERAL, 3, f, p, e); }

EnumLiteral <- edn:EnumDefName _ "#" _ en:EnumName { $$ = CN(ENUM_LITERAL, 2, edn, en); }

TupleLiteral <- "(" _ ")" { $$ = CT(TUPLE_LITERAL, NULL); } /
                "(" _ e:Expr _ "," _ ")" { $$ = CN(TUPLE_LITERAL, 1, e); } /
                "(" _ te:TupleExprs _ ")" { $$ = te; }
TupleExprs <- e1:Expr _ "," _ e2:Expr { $$ = CN(TUPLE_LITERAL, 2, e1, e2); } (_ "," _ e:Expr { AC($$, e); })*

ListLiteral <- "[" _ "]" { $$ = CT(LIST_LITERAL, NULL); } / "[" _ e:Exprs? _ "]" { $$ = RN(e, LIST_LITERAL); }

MapLiteral <- "[" _ ":" _ "]" { $$ = CT(MAP_LITERAL, NULL); } / "[" _ k:MapKeyValues? _ "]" { $$ = RN(k, MAP_LITERAL); }
MapKeyValues <- m:MapKeyValue { $$ = CN(MAP_KEY_VALUES, 1, m); } (_ "," _ m:MapKeyValue { AC($$, m); })*
MapKeyValue <- k:Expr _ ":" _ v:Expr { $$ = CN(MAP_KEY_VALUE, 2, k, v); }

TypeConstructorLiteral <- n:Name "<" _ e:Exprs? _ ">" { $$ = CN(TYPE_CONSTRUCTOR_LITERAL, 2, n, e); }

Args <- e:Expr { $$ = CN(ARGS, 1, e); } (_ "," _ e:Expr { AC($$, e); })*

#
# Misc
#

Identifier <- [a-zA-Z_][a-zA-Z_0-9_]*
Name <- Identifier { $$ = CT(NAME, $0); }
UnboundName <- "?" n:Name { $$ = RN(n, UNBOUND_NAME); } / "_" { $$ = CT(UNBOUND_NO_NAME, $0); }

#_ <- WS*
#__ <- WS+
_ <- (WS / Comments)*
__ <- (WS / Comments)+
WS <- [ \t\r\n] {
    if ($0[0] == '\n') {
        auxil->row++;
    }
}
Comments <- SingleLineComment / BlockComment
SingleLineComment <- "//" (!EOL .)* EOL?
EOL <- ("\r\n" / "\n" / "\r") { auxil->row++; }
BlockComment <- "/*" (BlockCommentContent / EOL)* "*/"
BlockCommentContent <- (!("*/" / EOL) .)
EOF <- _ !.

%%
int main() {
#ifdef UNITTEST
    symbol_table_unit_test();
#endif
    /*
     * Parse source
     */
    satie_auxil_t* satie_auxil = satie_auxil_new();
    satie_context_t *context = satie_create(satie_auxil);
    ast_node_t* program;
    satie_parse(context, &program);
    ast_print(program, 0);
    /*
     * Check semantics
     */
    /*
    satie_error_t error;
    if (!hm_infer_types(program, &error)) {
       fprintf(stderr, "Error: %s\n", satie_error_message);
       return 1;
    }
    */
    /*
     * Cleanup
     */
    satie_destroy(context);
    return 0;
}
