Let tuples be () instead of <>.
Remove gte etc.

==

This is strict:

fn square(x) {
   x *. x
}

This is strict and verbose:

fn square(x is Float) {
   x *. x
}

fn square(x) is Float {
   x *. x
}

fn square(x) {
   x *. x is Float
}

Do not implement "is" to start with.

==

Type aliases:

alias FooTuple = (Int, Int)
alias BarMap = String[String]
alias ListWithTuples = [(Int, Int)]
alias ListWithMaps = [Int[String]]

User defined types (with type contructors):

type Tree(T) = Leaf() or Branch(T, Tree(T), Tree(T))

Do not implement alias and user defined types to start with.

==

No operator overloading to start with:

@ is List concat
^ is String concat
~ map concat

+ is Int addition
+. is Float addition

- is Int subtraction
-. is Float subtraction

* is Int multiplication
*. is Float multiplication

/ is Int division
/. is Float division

% is Int modulo

=X= equality where X is a built-in types or user defined types
!X= inequality where X is a built-in types or user defined types

> is Int gt
>. is Float gt
>= is Int gte
>=. is Float gte
< is Int lt
<. is Float lt
<= is Int lte
<=. is Float lte

Example:

[1] @ [2]
["foo": 1, "bar": 42] ~ ["baz": 0]
"a" ^ "b"

alias foo = Int

?a := 1 is foo
?b := 2 is foo
a == foo b // false

(X can later on be a first order object. Not now.)

==

Rename the old use of "is" with "as":

switch (a) {
    case (?c, a) as ?d:
      d
}

==

Remember to shortcut && and ||

==

I will allow matching in function heads but not support multiple
function clauses:

fn lengthvec((?x, ?y)) {
    Math.sqrt(x^^2, y^^2)
}

fn lengthvec(a, b = (?x, ?y)) { // Default param
    Math.sqrt(x^^2, y^^2)
}

==

Stop using the new keyword to instantiate a new object:

class Foo {
  this(person, salary) { } // If no constructor a default one is defined
  person is String
  salary is Int
}

Foo(person: a, salary: b)

Foo should also be possibe to use as a pattern. Like this:

Foo(person: ?a, salary: ?b) := c

ML has this shortcut:

Foo(person: ?person, salary: ?salary) := c equals
Foo(?person, ?salary) := c

Nice

==

Lists - see above as well

Introduce :: (cons)

?a := 1
[?a :: ?rest] := c
?d := a :: rest,
true := c == d

[a] @ b equals a :: b

switch a {
    case []:
        [true]
    case ?a :: ?rest:
        rest @ [a]
}

==

Satie has lists. Not arrays.

==

Should it complain:

fn max(l is [Int]) is Int {
    switch l {
        case [?m]:
            m
        case [?m, ?n :: ?rest]:
            if m > n {
                max(m :: rest)
            } else {
                max(n :: rest)
            }
    }
}

No

==

Misc:

Strings.explode("foobar") (becomes [Char])
"foobar".explode() (becomes [Char])
Lists.implode(['f', 'o', 'o', 'r']) (becomes String)
['f', 'o', 'o', 'r'].implode() (becomes String)

Strings.concat(a, b)
  is the same as a @ b
    is the same as a.concat(b)

(?_, ?a) := b equals (_, ?a) := b (maybe)
(?_a, ?b) := c

==
